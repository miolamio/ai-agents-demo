#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä 1: –ë–∞–∑–æ–≤–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ —Å LangSmith

–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é LangSmith –∫–ª–∏–µ–Ω—Ç–∞
- –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö –∏ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- –ù–∞—Å—Ç—Ä–æ–π–∫—É –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
"""

import os
from datetime import datetime
from langsmith import Client
from langsmith.run_trees import RunTree

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
try:
    from dotenv import load_dotenv
    load_dotenv()
    print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ .env —Ñ–∞–π–ª–∞")
except ImportError:
    print("‚ö†Ô∏è  python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    print("–î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ .env —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install python-dotenv")


class SimpleAgent:
    """–ü—Ä–æ—Å—Ç–æ–π –∞–≥–µ–Ω—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏"""
    
    def __init__(self, name="SimpleAgent"):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LangSmith –∫–ª–∏–µ–Ω—Ç–∞
        self.ls_client = Client(
            api_url=os.getenv("LANGSMITH_ENDPOINT", "https://api.smith.langchain.com"),
            api_key=os.getenv("LANGSMITH_API_KEY") or os.getenv("LANGCHAIN_API_KEY", "demo-key")
        )
        self.name = name
        
    def process_query(self, query, user_id=None):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å —Å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π
        
        Args:
            query (str): –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å
            user_id (str, optional): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        """
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π run —Å RunTree
        parent_run = RunTree(
            name=f"{self.name}_process_query",
            run_type="chain",
            inputs={
                "query": query,
                "timestamp": datetime.now().isoformat(),
                "agent": self.name
            },
            tags=["demo", "simple-agent", "production"],
            metadata={
                "user_id": user_id,
                "version": "1.0",
                "environment": "demo"
            }
        )
        parent_run.post()
        
        try:
            # –≠–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞ –∞–≥–µ–Ω—Ç–æ–º
            steps = []
            
            # –®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞
            analysis_result = self._analyze_query(query, parent_run)
            steps.append(analysis_result)
            
            # –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
            response_result = self._generate_response(analysis_result, parent_run)
            steps.append(response_result)
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = {
                "query": query,
                "response": response_result["response"],
                "steps": steps,
                "total_tokens": sum(step.get("tokens", 0) for step in steps),
                "success": True
            }
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π run
            parent_run.end(outputs=result)
            parent_run.patch()
            
            return result
            
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä—É–µ–º –µ—ë –≤ LangSmith
            parent_run.end(error=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
            parent_run.patch()
            raise
    
    def _analyze_query(self, query, parent_run):
        """–ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        
        # –°–æ–∑–¥–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–π run –¥–ª—è —à–∞–≥–∞ –∞–Ω–∞–ª–∏–∑–∞
        analysis_run = parent_run.create_child(
            name="analyze_query",
            run_type="tool",
            inputs={"query": query},
        )
        analysis_run.post()
        
        # –≠–º—É–ª–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑
        result = {
            "intent": "question" if "?" in query else "statement",
            "keywords": query.split(),
            "complexity": "simple" if len(query.split()) < 10 else "complex",
            "tokens": len(query.split())
        }
        
        analysis_run.end(outputs=result)
        analysis_run.patch()
        
        return result
    
    def _generate_response(self, analysis, parent_run):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        
        # –°–æ–∑–¥–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–π run –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        generation_run = parent_run.create_child(
            name="generate_response",
            run_type="llm",
            inputs={
                "analysis": analysis,
                "model": "demo-model-v1"
            }
        )
        generation_run.post()
        
        # –≠–º—É–ª–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞
        if analysis["intent"] == "question":
            response = f"–û—Ç–≤–µ—á–∞—é –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ {', '.join(analysis['keywords'])}"
        else:
            response = f"–ü–æ–Ω—è–ª –≤–∞—à–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ {', '.join(analysis['keywords'])}"
        
        result = {
            "response": response,
            "model_used": "demo-model-v1",
            "tokens": len(response.split()) + 10,  # +10 –¥–ª—è —Å–ª—É–∂–µ–±–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
            "confidence": 0.95
        }
        
        generation_run.end(outputs=result)
        generation_run.patch()
        
        return result


def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ —Å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π"""
    
    print("=== –ü—Ä–∏–º–µ—Ä 1: –ë–∞–∑–æ–≤–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ —Å LangSmith ===\n")
    
    # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
    agent = SimpleAgent("DemoAgent")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    test_queries = [
        "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?",
        "Python - –æ—Ç–ª–∏—á–Ω—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –∏ –∫–∞–∫ –æ–Ω–∏ —É—Å—Ç—Ä–æ–µ–Ω—ã?"
    ]
    
    for i, query in enumerate(test_queries, 1):
        print(f"–ó–∞–ø—Ä–æ—Å {i}: {query}")
        
        try:
            result = agent.process_query(query, user_id=f"user_{i}")
            print(f"–û—Ç–≤–µ—Ç: {result['response']}")
            print(f"–¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {result['total_tokens']}")
            print(f"–®–∞–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {len(result['steps'])}")
            print("-" * 50)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    
    print("\n–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ LangSmith.")
    print("–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–æ–∫ –æ—Ç–∫—Ä–æ–π—Ç–µ https://smith.langchain.com")


def check_environment_variables():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    print("-" * 50)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è LangSmith
    env_vars = {
        "LANGSMITH_API_KEY": os.getenv("LANGSMITH_API_KEY"),
        "LANGSMITH_TRACING": os.getenv("LANGSMITH_TRACING"),
        "LANGSMITH_PROJECT": os.getenv("LANGSMITH_PROJECT"),
        "LANGSMITH_ENDPOINT": os.getenv("LANGSMITH_ENDPOINT"),
        # Legacy –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        "LANGCHAIN_API_KEY": os.getenv("LANGCHAIN_API_KEY"),
        "LANGCHAIN_TRACING_V2": os.getenv("LANGCHAIN_TRACING_V2"),
        "LANGCHAIN_PROJECT": os.getenv("LANGCHAIN_PROJECT")
    }
    
    for var, value in env_vars.items():
        if value:
            # –ú–∞—Å–∫–∏—Ä—É–µ–º API –∫–ª—é—á–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            if "API_KEY" in var and len(value) > 10:
                display_value = value[:8] + "..." + value[-4:]
            else:
                display_value = value
            print(f"‚úÖ {var}: {display_value}")
        else:
            print(f"‚ùå {var}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π API –∫–ª—é—á
    api_key = os.getenv("LANGSMITH_API_KEY") or os.getenv("LANGCHAIN_API_KEY")
    
    if not api_key:
        print("\n‚ö†Ô∏è  API –∫–ª—é—á LangSmith –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("\nüìã –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env:")
        print("cp env.example .env")
        print("\nüîß –ó–∞—Ç–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env –∏ –¥–æ–±–∞–≤—å—Ç–µ:")
        print("LANGSMITH_API_KEY=your-api-key-here")
        print("LANGSMITH_TRACING=true")
        print("LANGSMITH_PROJECT=your-project-name")
        print("\nüîó –ü–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á: https://smith.langchain.com")
        print("\n–î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á.\n")
        return False
    else:
        project = os.getenv("LANGSMITH_PROJECT") or os.getenv("LANGCHAIN_PROJECT", "default")
        endpoint = os.getenv("LANGSMITH_ENDPOINT", "https://api.smith.langchain.com")
        print(f"\n‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞!")
        print(f"üìä –ü—Ä–æ–µ–∫—Ç: {project}")
        print(f"üîó Endpoint: {endpoint}")
        return True


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env_ready = check_environment_variables()
    
    if env_ready:
        print("\nüöÄ –ó–∞–ø—É—Å–∫ —Å —Ä–µ–∞–ª—å–Ω—ã–º API...")
    else:
        print("üé≠ –ó–∞–ø—É—Å–∫ –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ...")
    
    main()
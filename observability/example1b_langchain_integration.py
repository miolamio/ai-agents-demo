#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä 1b: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è LangSmith —Å LangChain
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ LangChain

–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ LangSmith:
https://smith.langchain.com/
"""

import os
from datetime import datetime

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass  # –ï—Å–ª–∏ dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ

def demo_with_langchain():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ —Å LangChain"""
    
    print("=== –ü—Ä–∏–º–µ—Ä 1b: LangChain + LangSmith –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ===\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = {
        "LANGSMITH_API_KEY": os.getenv("LANGSMITH_API_KEY") or os.getenv("LANGCHAIN_API_KEY"),
        "OPENAI_API_KEY": os.getenv("OPENAI_API_KEY"),
        "LANGSMITH_TRACING": os.getenv("LANGSMITH_TRACING", "false"),
        "LANGSMITH_PROJECT": os.getenv("LANGSMITH_PROJECT") or os.getenv("LANGCHAIN_PROJECT", "default")
    }
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    for var, value in required_vars.items():
        status = "‚úÖ" if value and value != "false" else "‚ùå"
        display_value = value[:20] + "..." if value and len(value) > 20 else value or "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        print(f"  {status} {var}: {display_value}")
    
    if not required_vars["LANGSMITH_API_KEY"]:
        print("\n‚ö†Ô∏è  –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º LangSmith —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:")
        print("export LANGSMITH_API_KEY='your-api-key'")
        print("export LANGSMITH_TRACING=true")
        print("export LANGSMITH_PROJECT='your-project-name'")
        print("\n–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ–º–æ-—Ä–µ–∂–∏–º...\n")
        demo_without_real_api()
        return
    
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ LangChain
        from langchain_openai import ChatOpenAI
        
        print(f"\nüöÄ –°–æ–∑–¥–∞–Ω–∏–µ LLM —Å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π...")
        print(f"üìä –ü—Ä–æ–µ–∫—Ç: {required_vars['LANGSMITH_PROJECT']}")
        print(f"üîó Endpoint: {os.getenv('LANGSMITH_ENDPOINT', 'https://api.smith.langchain.com')}")
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å - —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        llm = ChatOpenAI()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        test_prompts = [
            "Hello, world!",
            "Explain machine learning in simple terms",
            "What is the capital of France?"
        ]
        
        print(f"\nüìù –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ {len(test_prompts)} –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π:")
        
        for i, prompt in enumerate(test_prompts, 1):
            print(f"\n{i}. –ó–∞–ø—Ä–æ—Å: {prompt}")
            
            try:
                response = llm.invoke(prompt)
                print(f"   –û—Ç–≤–µ—Ç: {response.content[:100]}...")
                print(f"   ‚úÖ –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ LangSmith")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        print(f"\nüéâ –ì–æ—Ç–æ–≤–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –≤ LangSmith:")
        print(f"üîó https://smith.langchain.com/")
        
    except ImportError as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("–î–ª—è —Ä–∞–±–æ—Ç—ã —Å LangChain —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:")
        print("pip install langchain langchain-openai")
        demo_without_real_api()
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        demo_without_real_api()


def demo_without_real_api():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ü–µ–ø—Ü–∏–π –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤"""
    
    print("\nüé≠ –î–ï–ú–û-–†–ï–ñ–ò–ú: –°–∏–º—É–ª—è—Ü–∏—è LangChain + LangSmith")
    print("-" * 50)
    
    # –≠–º—É–ª–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–æ–∫
    demo_traces = [
        {
            "id": "trace_001",
            "name": "ChatOpenAI.invoke",
            "input": "Hello, world!",
            "output": "Hello! How can I help you today?",
            "start_time": datetime.now(),
            "duration_ms": 850,
            "tokens": {"input": 3, "output": 8, "total": 11},
            "cost": 0.00022
        },
        {
            "id": "trace_002", 
            "name": "ChatOpenAI.invoke",
            "input": "Explain machine learning",
            "output": "Machine learning is a subset of artificial intelligence...",
            "start_time": datetime.now(),
            "duration_ms": 1200,
            "tokens": {"input": 4, "output": 45, "total": 49},
            "cost": 0.00098
        },
        {
            "id": "trace_003",
            "name": "ChatOpenAI.invoke", 
            "input": "What is the capital of France?",
            "output": "The capital of France is Paris.",
            "start_time": datetime.now(),
            "duration_ms": 600,
            "tokens": {"input": 8, "output": 7, "total": 15},
            "cost": 0.00030
        }
    ]
    
    print("üìä –°–∏–º—É–ª—è—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–æ–∫:")
    
    total_cost = 0
    total_tokens = 0
    
    for trace in demo_traces:
        print(f"\nüîç –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {trace['id']}")
        print(f"   üìù –ó–∞–ø—Ä–æ—Å: {trace['input']}")
        print(f"   ü§ñ –û—Ç–≤–µ—Ç: {trace['output'][:50]}...")
        print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è: {trace['duration_ms']}ms")
        print(f"   üéØ –¢–æ–∫–µ–Ω—ã: {trace['tokens']['total']} ({trace['tokens']['input']}‚Üí{trace['tokens']['output']})")
        print(f"   üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${trace['cost']:.5f}")
        
        total_cost += trace['cost']
        total_tokens += trace['tokens']['total']
    
    print(f"\nüìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${total_cost:.5f}")
    print(f"   üéØ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: {total_tokens}")
    print(f"   üìä –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ —Ç–æ–∫–µ–Ω: ${total_cost/total_tokens:.7f}")
    
    print(f"\n‚ú® –í —Ä–µ–∞–ª—å–Ω–æ–º LangSmith –≤—ã —É–≤–∏–¥–∏—Ç–µ:")
    print(f"   üìä –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
    print(f"   üîç –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞")
    print(f"   üí∞ –ê–Ω–∞–ª–∏–∑ –∑–∞—Ç—Ä–∞—Ç –ø–æ –º–æ–¥–µ–ª—è–º")
    print(f"   üìà –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    print(f"   üêõ –û—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")


def show_integration_examples():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    
    print("\nüìö –ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ LangSmith:")
    print("-" * 60)
    
    print("\n1Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    print("""
export LANGSMITH_TRACING="true"
export LANGSMITH_ENDPOINT="https://api.smith.langchain.com"
export LANGSMITH_API_KEY="your-api-key"
export LANGSMITH_PROJECT="pr-artistic-gastropod-72"
export OPENAI_API_KEY="your-openai-api-key"
""")
    
    print("2Ô∏è‚É£ –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä —Å ChatOpenAI:")
    print("""
from langchain_openai import ChatOpenAI

llm = ChatOpenAI()
llm.invoke("Hello, world!")
# –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!
""")
    
    print("3Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:")
    print("""
pip install -U langchain langchain-openai
""")
    
    print("4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
    print("""
from langsmith import Client
client = Client()
print("Connected to LangSmith!")
""")


if __name__ == "__main__":
    demo_with_langchain()
    show_integration_examples()
    
    print(f"\nüîó –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:")
    print(f"   üìñ Conceptual Guide: https://docs.smith.langchain.com/concepts")
    print(f"   üéì LangSmith Academy: https://academy.langchain.com/")
    print(f"   üõ†Ô∏è  –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: https://docs.smith.langchain.com/tracing")

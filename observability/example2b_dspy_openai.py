#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä 2b: DSPy –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å —Ä–µ–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π OpenAI

–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
- –ù–∞—Å—Ç—Ä–æ–π–∫—É DSPy —Å —Ä–µ–∞–ª—å–Ω–æ–π OpenAI –º–æ–¥–µ–ª—å—é
- –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö —Å–∏–≥–Ω–∞—Ç—É—Ä –¥–ª—è Q&A
- –ë–∞–∑–æ–≤—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø—Ä–æ–º–ø—Ç–æ–≤
- –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–æ –∏ –ø–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
"""

import os
import dspy
from typing import List, Dict, Any
import time

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
try:
    from dotenv import load_dotenv
    load_dotenv()
    print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
except ImportError:
    print("‚ö†Ô∏è  python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫
try:
    import dspy
    print("‚úÖ DSPy –¥–æ—Å—Ç—É–ø–µ–Ω")
    DSPY_AVAILABLE = True
except ImportError:
    print("‚ùå DSPy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install dspy-ai")
    DSPY_AVAILABLE = False


# 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—ã –∑–∞–¥–∞—á
class SimpleQA(dspy.Signature):
    """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É"""
    
    question = dspy.InputField(desc="–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    answer = dspy.OutputField(desc="–ö—Ä–∞—Ç–∫–∏–π –∏ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç")


class ReasoningQA(dspy.Signature):
    """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å –ø–æ—à–∞–≥–æ–≤—ã–º–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è–º–∏"""
    
    question = dspy.InputField(desc="–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è") 
    reasoning = dspy.OutputField(desc="–ü–æ—à–∞–≥–æ–≤—ã–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è")
    answer = dspy.OutputField(desc="–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π")


class FactCheckQA(dspy.Signature):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–∫—Ç—ã –∏ –¥–∞–µ—Ç –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã"""
    
    question = dspy.InputField(desc="–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    confidence = dspy.OutputField(desc="–£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (–≤—ã—Å–æ–∫–∏–π/—Å—Ä–µ–¥–Ω–∏–π/–Ω–∏–∑–∫–∏–π)")
    sources = dspy.OutputField(desc="–í–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    answer = dspy.OutputField(desc="–û—Ç–≤–µ—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—Ç–µ–ø–µ–Ω–∏ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏")


# 2. –°–æ–∑–¥–∞–µ–º DSPy –º–æ–¥—É–ª—å
class SmartQAAgent(dspy.Module):
    """–£–º–Ω—ã–π –∞–≥–µ–Ω—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–µ–∂–∏–º–∞–º–∏"""
    
    def __init__(self):
        super().__init__()
        
        # –†–∞–∑–ª–∏—á–Ω—ã–µ —Ä–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã
        self.simple_qa = dspy.Predict(SimpleQA)
        self.reasoning_qa = dspy.ChainOfThought(ReasoningQA)
        self.fact_check_qa = dspy.ChainOfThought(FactCheckQA)
        
        # –î–ª—è more complex reasoning
        self.complex_reasoning = dspy.ChainOfThought("question -> analysis, evidence, conclusion")
        
    def forward(self, question: str, mode: str = "simple") -> dspy.Prediction:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∞–≥–µ–Ω—Ç–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–µ–∂–∏–º–∞–º–∏
        
        Args:
            question: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            mode: –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã ("simple", "reasoning", "fact_check")
            
        Returns:
            dspy.Prediction: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        
        if mode == "simple":
            return self.simple_qa(question=question)
            
        elif mode == "reasoning":
            return self.reasoning_qa(question=question)
            
        elif mode == "fact_check":
            return self.fact_check_qa(question=question)
            
        else:
            # Default to simple mode
            return self.simple_qa(question=question)


# 3. –§—É–Ω–∫—Ü–∏–∏ –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
def evaluate_answer_quality(example, prediction, trace=None) -> float:
    """
    –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
    
    Args:
        example: –û–∂–∏–¥–∞–µ–º—ã–π –ø—Ä–∏–º–µ—Ä
        prediction: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏  
        trace: –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        float: –û—Ü–µ–Ω–∫–∞ –æ—Ç 0.0 –¥–æ 1.0
    """
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç –∏–∑ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    if hasattr(prediction, 'answer'):
        answer = prediction.answer
    elif hasattr(prediction, 'completion'):
        answer = prediction.completion
    else:
        answer = str(prediction)
    
    if not answer or len(answer.strip()) < 5:
        return 0.0
    
    score = 0.0
    
    # 1. –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ (–Ω–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π)
    answer_length = len(answer.strip())
    if 20 <= answer_length <= 300:
        score += 0.25
    elif 10 <= answer_length <= 500:
        score += 0.15
    
    # 2. –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∫ –≤–æ–ø—Ä–æ—Å—É
    question = example.question if hasattr(example, 'question') else ""
    if question:
        question_words = set(question.lower().split())
        answer_words = set(answer.lower().split())
        overlap = len(question_words.intersection(answer_words))
        if overlap > 0:
            score += 0.3 * min(overlap / len(question_words), 1.0)
    
    # 3. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    if any(marker in answer for marker in [':', '.', '?', '!', ',']):
        score += 0.15
    
    # 4. –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ "–ø—É—Å—Ç—ã—Ö" –æ—Ç–≤–µ—Ç–æ–≤
    empty_phrases = ["–Ω–µ –∑–Ω–∞—é", "–Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å", "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", "–æ—à–∏–±–∫–∞"]
    if not any(phrase in answer.lower() for phrase in empty_phrases):
        score += 0.3
    
    return min(score, 1.0)


def evaluate_reasoning_quality(example, prediction, trace=None) -> float:
    """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π"""
    
    if not hasattr(prediction, 'reasoning'):
        return 0.0
    
    reasoning = prediction.reasoning
    if not reasoning or len(reasoning.strip()) < 10:
        return 0.0
    
    score = 0.0
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–æ–≥–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    reasoning_indicators = [
        "–ø–æ—Ç–æ–º—É —á—Ç–æ", "–ø–æ—Å–∫–æ–ª—å–∫—É", "—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ", "–≤–æ-–ø–µ—Ä–≤—ã—Ö", "–≤–æ-–≤—Ç–æ—Ä—ã—Ö", 
        "—Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º", "–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ", "–∏–∑ —ç—Ç–æ–≥–æ —Å–ª–µ–¥—É–µ—Ç"
    ]
    
    for indicator in reasoning_indicators:
        if indicator in reasoning.lower():
            score += 0.2
    
    # –î–ª–∏–Ω–∞ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π
    if len(reasoning.split()) >= 10:
        score += 0.4
    
    return min(score, 1.0)


# 4. –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
def create_qa_dataset() -> List[dspy.Example]:
    """–°–æ–∑–¥–∞–µ—Ç –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    examples = [
        dspy.Example(
            question="–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?",
            answer="–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ - —ç—Ç–æ –æ–±–ª–∞—Å—Ç—å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–∞–º –æ–±—É—á–∞—Ç—å—Å—è –∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ —è–≤–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è."
        ),
        dspy.Example(
            question="–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏?",
            answer="–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ —Å–æ—Å—Ç–æ—è—Ç –∏–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —É–∑–ª–æ–≤ (–Ω–µ–π—Ä–æ–Ω–æ–≤), –∫–æ—Ç–æ—Ä—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ –≤–µ—Å–∞ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏, –∏–º–∏—Ç–∏—Ä—É—è —Ä–∞–±–æ—Ç—É —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –º–æ–∑–≥–∞."
        ),
        dspy.Example(
            question="–ß—Ç–æ —Ç–∞–∫–æ–µ Python?",
            answer="Python - —ç—Ç–æ –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—â–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, –∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–≤–æ–µ–π –ø—Ä–æ—Å—Ç–æ—Ç–æ–π –∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å—é –∫–æ–¥–∞."
        ),
        dspy.Example(
            question="–î–ª—è —á–µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Git?",
            answer="Git - —ç—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–µ—Ä—Å–∏–π, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–¥–µ, —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏ –ø—Ä–æ–µ–∫—Ç–∞."
        ),
        dspy.Example(
            question="–ß—Ç–æ —Ç–∞–∫–æ–µ API?",
            answer="API (Application Programming Interface) - —ç—Ç–æ –Ω–∞–±–æ—Ä –ø—Ä–∞–≤–∏–ª –∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞–∑–Ω—ã–º –ø—Ä–æ–≥—Ä–∞–º–º–∞–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º."
        ),
        dspy.Example(
            question="–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç?",
            answer="–ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ —Å–µ—Ç—å –≤–∑–∞–∏–º–æ—Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ–±–º–µ–Ω–∏–≤–∞—é—Ç—Å—è –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º TCP/IP, –∏—Å–ø–æ–ª—å–∑—É—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä—ã –∏ —Å–µ—Ä–≤–µ—Ä—ã."
        )
    ]
    
    return examples


def check_openai_configuration() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é OpenAI"""
    
    openai_key = os.getenv("OPENAI_API_KEY")
    
    print(f"\nüîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OpenAI:")
    print(f"  API Key: {'‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if openai_key else '‚ùå –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    
    if not openai_key:
        print("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        print("   –î–æ–±–∞–≤—å—Ç–µ –≤ .env: OPENAI_API_KEY=–≤–∞—à-–∫–ª—é—á")
        return False
    
    return True


def demonstrate_simple_qa():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ Q&A"""
    
    print("\nüéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ Q&A")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
    qa_agent = SmartQAAgent()
    
    test_questions = [
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç?",
        "–ö–∞–∫ –∏–∑—É—á–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ?", 
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –æ–±–ª–∞—á–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è?"
    ]
    
    results = []
    
    for i, question in enumerate(test_questions, 1):
        print(f"\nüìã –í–æ–ø—Ä–æ—Å {i}: {question}")
        
        try:
            start_time = time.time()
            
            # –ü—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º
            simple_result = qa_agent(question=question, mode="simple")
            simple_time = time.time() - start_time
            
            simple_answer = simple_result.answer if hasattr(simple_result, 'answer') else "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞"
            print(f"ü§ñ –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç ({simple_time:.1f}—Å): {simple_answer}")
            
            # –†–µ–∂–∏–º —Å —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è–º–∏
            start_time = time.time()
            reasoning_result = qa_agent(question=question, mode="reasoning")
            reasoning_time = time.time() - start_time
            
            if hasattr(reasoning_result, 'reasoning') and hasattr(reasoning_result, 'answer'):
                print(f"üß† –†–∞—Å—Å—É–∂–¥–µ–Ω–∏—è ({reasoning_time:.1f}—Å): {reasoning_result.reasoning}")
                print(f"üìù –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç: {reasoning_result.answer}")
            else:
                reasoning_answer = reasoning_result.answer if hasattr(reasoning_result, 'answer') else "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞"
                print(f"üß† –û—Ç–≤–µ—Ç —Å —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è–º–∏ ({reasoning_time:.1f}—Å): {reasoning_answer}")
            
            # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
            example = dspy.Example(question=question, answer="–¥–µ–º–æ-–æ—Ç–≤–µ—Ç")
            simple_score = evaluate_answer_quality(example, simple_result)
            reasoning_score = evaluate_reasoning_quality(example, reasoning_result)
            
            print(f"üìä –û—Ü–µ–Ω–∫–∏: –ü—Ä–æ—Å—Ç–æ–π={simple_score:.2f} | –†–∞—Å—Å—É–∂–¥–µ–Ω–∏—è={reasoning_score:.2f}")
            
            results.append({
                'question': question,
                'simple_score': simple_score,
                'reasoning_score': reasoning_score,
                'simple_time': simple_time,
                'reasoning_time': reasoning_time
            })
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            continue
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if results:
        avg_simple_score = sum(r['simple_score'] for r in results) / len(results)
        avg_reasoning_score = sum(r['reasoning_score'] for r in results) / len(results)
        avg_simple_time = sum(r['simple_time'] for r in results) / len(results)
        avg_reasoning_time = sum(r['reasoning_time'] for r in results) / len(results)
        
        print(f"\nüìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã: {avg_simple_score:.2f} (—Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_simple_time:.1f}—Å)")
        print(f"   –° —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è–º–∏: {avg_reasoning_score:.2f} (—Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_reasoning_time:.1f}—Å)")
        
        improvement = ((avg_reasoning_score - avg_simple_score) / avg_simple_score) * 100 if avg_simple_score > 0 else 0
        print(f"   –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞: {improvement:.1f}%")


def demonstrate_optimization():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    
    print(f"\nüöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ DSPy")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    training_data = create_qa_dataset()
    
    print(f"üìö –°–æ–∑–¥–∞–Ω –æ–±—É—á–∞—é—â–∏–π –Ω–∞–±–æ—Ä: {len(training_data)} –ø—Ä–∏–º–µ—Ä–æ–≤")
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
    train_size = int(0.7 * len(training_data))
    trainset = training_data[:train_size]
    testset = training_data[train_size:]
    
    print(f"   –û–±—É—á–∞—é—â–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤: {len(trainset)}")
    print(f"   –¢–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤: {len(testset)}")
    
    # –°–æ–∑–¥–∞–µ–º –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
    qa_agent = SmartQAAgent()
    
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏:")
    unoptimized_scores = []
    
    for example in testset:
        try:
            result = qa_agent(question=example.question, mode="simple")
            score = evaluate_answer_quality(example, result)
            unoptimized_scores.append(score)
            print(f"   Q: {example.question[:50]}...")
            print(f"   A: {result.answer[:100] if hasattr(result, 'answer') else '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'}...")
            print(f"   –û—Ü–µ–Ω–∫–∞: {score:.2f}\n")
        except Exception as e:
            print(f"   –û—à–∏–±–∫–∞: {e}")
            continue
    
    avg_unoptimized = sum(unoptimized_scores) / len(unoptimized_scores) if unoptimized_scores else 0
    print(f"üìä –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –¥–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {avg_unoptimized:.2f}")
    
    # –ë–∞–∑–æ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å Few-Shot –ø—Ä–∏–º–µ—Ä–∞–º–∏  
    try:
        print(f"\n‚öôÔ∏è –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...")
        
        # –ü—Ä–æ—Å—Ç–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è - –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –≤ –ø—Ä–æ–º–ø—Ç
        optimizer = dspy.BootstrapFewShot(
            metric=evaluate_answer_quality,
            max_bootstrapped_demos=2,
            max_labeled_demos=1
        )
        
        optimized_qa = optimizer.compile(qa_agent, trainset=trainset)
        
        print(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏:")
        optimized_scores = []
        
        for example in testset:
            try:
                result = optimized_qa(question=example.question, mode="simple")
                score = evaluate_answer_quality(example, result)
                optimized_scores.append(score)
                print(f"   Q: {example.question[:50]}...")
                print(f"   A: {result.answer[:100] if hasattr(result, 'answer') else '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'}...")
                print(f"   –û—Ü–µ–Ω–∫–∞: {score:.2f}\n")
            except Exception as e:
                print(f"   –û—à–∏–±–∫–∞: {e}")
                continue
        
        avg_optimized = sum(optimized_scores) / len(optimized_scores) if optimized_scores else 0
        print(f"üìä –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –ø–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {avg_optimized:.2f}")
        
        if avg_unoptimized > 0:
            improvement = ((avg_optimized - avg_unoptimized) / avg_unoptimized) * 100
            print(f"üéØ –£–ª—É—á—à–µ–Ω–∏–µ: {improvement:.1f}%")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        try:
            optimized_qa.save("optimized_qa_model.json")
            print(f"üíæ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ optimized_qa_model.json")
        except Exception as e:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–æ–¥–µ–ª—å: {e}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
        print(f"   –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ API –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ DSPy —Å OpenAI"""
    
    print("=== DSPy —Å —Ä–µ–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π OpenAI ===")
    
    if not DSPY_AVAILABLE:
        print("‚ùå DSPy –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é OpenAI
    if not check_openai_configuration():
        return
    
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DSPy —Å OpenAI
        print(f"\nüîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DSPy —Å OpenAI...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI –º–æ–¥–µ–ª—å (–Ω–æ–≤—ã–π API DSPy)
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–æ–≤—ã–π —Å–ø–æ—Å–æ–± –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            lm = dspy.LM(
                model='openai/gpt-4o-mini',
                api_key=os.getenv("OPENAI_API_KEY"),
                max_tokens=1000,
                temperature=0.7
            )
        except Exception as e:
            # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π API
            try:
                import openai
                from dspy.clients.openai_client import OpenAIClient
                
                client = OpenAIClient(
                    api_key=os.getenv("OPENAI_API_KEY"),
                    model='gpt-4o-mini'
                )
                lm = client
            except Exception as e2:
                # –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç - –ø—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ openai
                print(f"‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å OpenAI")
                import openai
                
                class OpenAIWrapper:
                    def __init__(self, model='gpt-4o-mini'):
                        self.client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
                        self.model = model
                    
                    def __call__(self, prompt, **kwargs):
                        response = self.client.chat.completions.create(
                            model=self.model,
                            messages=[{"role": "user", "content": str(prompt)}],
                            max_tokens=kwargs.get('max_tokens', 1000),
                            temperature=kwargs.get('temperature', 0.7)
                        )
                        return [response.choices[0].message.content]
                
                lm = OpenAIWrapper()
        
        dspy.configure(lm=lm)
        print(f"‚úÖ DSPy –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å –º–æ–¥–µ–ª—å—é gpt-4o-mini")
        
        # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        print(f"\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:")
        print("   1. –ü—Ä–æ—Å—Ç–æ–µ Q&A —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–µ–∂–∏–º–∞–º–∏")
        print("   2. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        print("   3. –û–±–∞ —Ä–µ–∂–∏–º–∞")
        
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3) –∏–ª–∏ Enter –¥–ª—è –æ–±–æ–∏—Ö —Ä–µ–∂–∏–º–æ–≤: ").strip()
        
        if choice in ['1', '']:
            demonstrate_simple_qa()
            
        elif choice == '2':
            demonstrate_optimization()
            
        elif choice == '3':
            demonstrate_simple_qa()
            demonstrate_optimization()
            
        else:
            print("‚ö†Ô∏è  –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –∑–∞–ø—É—Å–∫–∞—é –æ–±–∞ —Ä–µ–∂–∏–º–∞")
            demonstrate_simple_qa()
            demonstrate_optimization()
        
        print(f"\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è DSPy –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üîç –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print(f"   dspy.inspect_history(n=3)")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ DSPy: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()

"""
web_interface.py - –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è Web Research Agent

Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä.
–ó–∞–ø—É—Å–∫: streamlit run web_interface.py
"""

import streamlit as st
import asyncio
import json
from datetime import datetime
import os
from dotenv import load_dotenv
from web_research_agent import WebResearchAssistant, ResearchOutput
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# ============================================================================
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Streamlit
# ============================================================================

st.set_page_config(
    page_title="üîç Web Research Agent",
    page_icon="üîç",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        font-weight: bold;
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        text-align: center;
        padding: 1rem 0;
    }
    .stAlert {
        border-radius: 10px;
    }
    .finding-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 10px;
        margin: 0.5rem 0;
        border-left: 4px solid #667eea;
    }
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 1rem;
        border-radius: 10px;
        text-align: center;
    }
</style>
""", unsafe_allow_html=True)

# ============================================================================
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
# ============================================================================

if 'assistant' not in st.session_state:
    st.session_state.assistant = None

if 'history' not in st.session_state:
    st.session_state.history = []

if 'api_keys_set' not in st.session_state:
    st.session_state.api_keys_set = False

# ============================================================================
# –§—É–Ω–∫—Ü–∏–∏ –ø–æ–º–æ—â–Ω–∏–∫–∏
# ============================================================================

def initialize_assistant(openai_key: str, tavily_key: str):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å API –∫–ª—é—á–∞–º–∏"""
    try:
        st.session_state.assistant = WebResearchAssistant(
            openai_api_key=openai_key,
            tavily_api_key=tavily_key
        )
        st.session_state.api_keys_set = True
        return True
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
        return False


def get_sentiment_color(sentiment: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    colors = {
        "positive": "#10b981",
        "neutral": "#6b7280",
        "negative": "#ef4444"
    }
    return colors.get(sentiment, "#6b7280")


def get_confidence_emoji(level: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"""
    emojis = {
        "high": "üü¢",
        "medium": "üü°",
        "low": "üî¥"
    }
    return emojis.get(level, "‚ö™")


# ============================================================================
# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
# ============================================================================

with st.sidebar:
    st.markdown("## ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    # API –∫–ª—é—á–∏
    st.markdown("### üîë API –ö–ª—é—á–∏")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env_openai = os.getenv("OPENAI_API_KEY", "")
    env_tavily = os.getenv("TAVILY_API_KEY", "")
    
    openai_key = st.text_input(
        "OpenAI API Key",
        value=env_openai,
        type="password",
        help="–ü–æ–ª—É—á–∏—Ç—å –Ω–∞ https://platform.openai.com/api-keys"
    )
    
    tavily_key = st.text_input(
        "Tavily API Key",
        value=env_tavily,
        type="password",
        help="–ü–æ–ª—É—á–∏—Ç—å –Ω–∞ https://tavily.com/"
    )
    
    if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–ª—é—á–∏", type="primary"):
        if openai_key and tavily_key:
            if initialize_assistant(openai_key, tavily_key):
                st.success("‚úÖ –ö–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        else:
            st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–±–∞ –∫–ª—é—á–∞")
    
    st.divider()
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é
    st.markdown("### üß† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é")
    
    if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å"):
        if st.session_state.assistant:
            st.session_state.assistant.clear_memory()
            st.success("–ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞")
    
    if st.button("üìú –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"):
        st.session_state.history = []
        st.success("–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞")
    
    st.divider()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    st.markdown("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    st.metric("–ó–∞–ø—Ä–æ—Å–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏–∏", len(st.session_state.history))
    
    if st.session_state.history:
        sentiments = [h['output'].sentiment for h in st.session_state.history]
        st.markdown("**–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤:**")
        for s in ["positive", "neutral", "negative"]:
            count = sentiments.count(s)
            if count > 0:
                st.write(f"{s.capitalize()}: {count}")
    
    st.divider()
    
    # –≠–∫—Å–ø–æ—Ä—Ç
    st.markdown("### üíæ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
    
    if st.session_state.history:
        # –°–æ–∑–¥–∞–µ–º JSON –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_data = {
            "timestamp": datetime.now().isoformat(),
            "total_queries": len(st.session_state.history),
            "queries": [
                {
                    "query": h['query'],
                    "timestamp": h['timestamp'],
                    "summary": h['output'].summary,
                    "sentiment": h['output'].sentiment,
                    "confidence": h['output'].confidence_level,
                    "findings_count": len(h['output'].key_findings)
                }
                for h in st.session_state.history
            ]
        }
        
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é (JSON)",
            data=json.dumps(export_data, ensure_ascii=False, indent=2),
            file_name=f"research_history_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
            mime="application/json"
        )

# ============================================================================
# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
# ============================================================================

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.markdown('<h1 class="main-header">üîç Web Research Agent</h1>', unsafe_allow_html=True)
st.markdown('<p style="text-align: center; color: #6b7280;">Powered by Pydantic AI & Tavily</p>', unsafe_allow_html=True)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
if not st.session_state.api_keys_set:
    st.warning("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á–∏ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
    st.stop()

# –¢–∞–±—ã
tab1, tab2, tab3, tab4 = st.tabs(["üîç –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "üìú –ò—Å—Ç–æ—Ä–∏—è", "‚ÑπÔ∏è –û —Å–∏—Å—Ç–µ–º–µ"])

# ============================================================================
# –¢–∞–± 1: –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
# ============================================================================

with tab1:
    # –§–æ—Ä–º–∞ –≤–≤–æ–¥–∞
    with st.form("research_form"):
        col1, col2 = st.columns([4, 1])
        
        with col1:
            query = st.text_area(
                "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:",
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞",
                height=100
            )
        
        with col2:
            st.markdown("<br>", unsafe_allow_html=True)
            submitted = st.form_submit_button("üöÄ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å", type="primary", use_container_width=True)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
    if submitted and query:
        with st.spinner("üîÑ –í—ã–ø–æ–ª–Ω—è—é –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥"):
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
                result = st.session_state.assistant.process_message_sync(query)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                st.session_state.history.append({
                    'query': query,
                    'timestamp': datetime.now().isoformat(),
                    'output': result
                })
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                st.success("‚úÖ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                
                # –ú–µ—Ç—Ä–∏–∫–∏
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    st.metric(
                        "–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å",
                        result.sentiment.capitalize(),
                        delta=None,
                        delta_color="normal"
                    )
                
                with col2:
                    confidence_emoji = get_confidence_emoji(result.confidence_level)
                    st.metric(
                        "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å",
                        f"{confidence_emoji} {result.confidence_level.capitalize()}"
                    )
                
                with col3:
                    st.metric(
                        "–ö–ª—é—á–µ–≤—ã—Ö –Ω–∞—Ö–æ–¥–æ–∫",
                        len(result.key_findings)
                    )
                
                with col4:
                    entities_count = (
                        len(result.entities.people) +
                        len(result.entities.organizations) +
                        len(result.entities.locations)
                    )
                    st.metric(
                        "–ò–∑–≤–ª–µ—á–µ–Ω–æ —Å—É—â–Ω–æ—Å—Ç–µ–π",
                        entities_count
                    )
                
                # –†–µ–∑—é–º–µ
                st.markdown("### üìù –†–µ–∑—é–º–µ")
                st.info(result.summary)
                
                # –ö–ª—é—á–µ–≤—ã–µ –Ω–∞—Ö–æ–¥–∫–∏
                st.markdown("### üéØ –ö–ª—é—á–µ–≤—ã–µ –Ω–∞—Ö–æ–¥–∫–∏")
                
                for i, finding in enumerate(result.key_findings, 1):
                    with st.expander(f"{i}. {finding.title} (–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {finding.relevance_score}/10)"):
                        st.write(finding.description)
                        st.caption(f"üìå –ò—Å—Ç–æ—á–Ω–∏–∫: {finding.source}")
                
                # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å—É—â–Ω–æ—Å—Ç–∏
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("### üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
                    st.write(f"**–û—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–º–∞:** {result.categories.main_topic}")
                    if result.categories.subtopics:
                        st.write("**–ü–æ–¥—Ç–µ–º—ã:**")
                        for subtopic in result.categories.subtopics:
                            st.write(f"‚Ä¢ {subtopic}")
                
                with col2:
                    st.markdown("### üè∑Ô∏è –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏")
                    
                    if result.entities.people:
                        st.write("**–õ—é–¥–∏:**")
                        st.write(", ".join(result.entities.people))
                    
                    if result.entities.organizations:
                        st.write("**–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:**")
                        st.write(", ".join(result.entities.organizations))
                    
                    if result.entities.locations:
                        st.write("**–ú–µ—Å—Ç–∞:**")
                        st.write(", ".join(result.entities.locations))
                
                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
                if result.additional_queries:
                    st.markdown("### üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è")
                    for i, suggestion in enumerate(result.additional_queries, 1):
                        st.write(f"{i}. {suggestion}")
                
                # JSON –≤—ã–≤–æ–¥ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                with st.expander("üîß –ü–æ–∫–∞–∑–∞—Ç—å JSON –≤—ã–≤–æ–¥"):
                    json_output = st.session_state.assistant.get_json_output(result)
                    st.code(json_output, language="json")
                    
                    # –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
                    st.download_button(
                        label="üì• –°–∫–∞—á–∞—Ç—å JSON",
                        data=json_output,
                        file_name=f"research_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                        mime="application/json"
                    )
                
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {str(e)}")

# ============================================================================
# –¢–∞–± 2: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
# ============================================================================

with tab2:
    st.markdown("### üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π")
    
    if not st.session_state.history:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π.")
    else:
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        df_data = []
        for item in st.session_state.history:
            df_data.append({
                '–ó–∞–ø—Ä–æ—Å': item['query'][:50] + '...' if len(item['query']) > 50 else item['query'],
                '–í—Ä–µ–º—è': item['timestamp'],
                '–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å': item['output'].sentiment,
                '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å': item['output'].confidence_level,
                '–ù–∞—Ö–æ–¥–æ–∫': len(item['output'].key_findings),
                '–°—É—â–Ω–æ—Å—Ç–µ–π': (
                    len(item['output'].entities.people) +
                    len(item['output'].entities.organizations) +
                    len(item['output'].entities.locations)
                )
            })
        
        df = pd.DataFrame(df_data)
        
        # –ì—Ä–∞—Ñ–∏–∫ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        col1, col2 = st.columns(2)
        
        with col1:
            sentiment_counts = df['–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å'].value_counts()
            fig_sentiment = px.pie(
                values=sentiment_counts.values,
                names=sentiment_counts.index,
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏",
                color_discrete_map={
                    'positive': '#10b981',
                    'neutral': '#6b7280',
                    'negative': '#ef4444'
                }
            )
            st.plotly_chart(fig_sentiment, use_container_width=True)
        
        with col2:
            confidence_counts = df['–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å'].value_counts()
            fig_confidence = px.bar(
                x=confidence_counts.index,
                y=confidence_counts.values,
                title="–£—Ä–æ–≤–Ω–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏",
                labels={'x': '–£—Ä–æ–≤–µ–Ω—å', 'y': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'},
                color=confidence_counts.index,
                color_discrete_map={
                    'high': '#10b981',
                    'medium': '#fbbf24',
                    'low': '#ef4444'
                }
            )
            st.plotly_chart(fig_confidence, use_container_width=True)
        
        # –ì—Ä–∞—Ñ–∏–∫ –Ω–∞—Ö–æ–¥–æ–∫ –≤–æ –≤—Ä–µ–º–µ–Ω–∏
        if len(df) > 1:
            df['–í—Ä–µ–º—è_parsed'] = pd.to_datetime(df['–í—Ä–µ–º—è'])
            fig_timeline = go.Figure()
            
            fig_timeline.add_trace(go.Scatter(
                x=df['–í—Ä–µ–º—è_parsed'],
                y=df['–ù–∞—Ö–æ–¥–æ–∫'],
                mode='lines+markers',
                name='–ö–ª—é—á–µ–≤—ã–µ –Ω–∞—Ö–æ–¥–∫–∏',
                line=dict(color='#667eea', width=2),
                marker=dict(size=8)
            ))
            
            fig_timeline.add_trace(go.Scatter(
                x=df['–í—Ä–µ–º—è_parsed'],
                y=df['–°—É—â–Ω–æ—Å—Ç–µ–π'],
                mode='lines+markers',
                name='–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏',
                line=dict(color='#764ba2', width=2),
                marker=dict(size=8)
            ))
            
            fig_timeline.update_layout(
                title="–î–∏–Ω–∞–º–∏–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π",
                xaxis_title="–í—Ä–µ–º—è",
                yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
                hovermode='x unified'
            )
            
            st.plotly_chart(fig_timeline, use_container_width=True)
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö
        st.markdown("### üìã –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞")
        st.dataframe(df, use_container_width=True)

# ============================================================================
# –¢–∞–± 3: –ò—Å—Ç–æ—Ä–∏—è
# ============================================================================

with tab3:
    st.markdown("### üìú –ò—Å—Ç–æ—Ä–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π")
    
    if not st.session_state.history:
        st.info("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞.")
    else:
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        for i, item in enumerate(reversed(st.session_state.history), 1):
            with st.expander(f"#{len(st.session_state.history) - i + 1}: {item['query'][:100]}..."):
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.write(f"**–í—Ä–µ–º—è:** {item['timestamp']}")
                
                with col2:
                    st.write(f"**–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:** {item['output'].sentiment}")
                
                with col3:
                    st.write(f"**–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {item['output'].confidence_level}")
                
                st.write(f"**–†–µ–∑—é–º–µ:** {item['output'].summary}")
                
                if st.button(f"üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å", key=f"repeat_{i}"):
                    st.session_state.repeat_query = item['query']
                    st.rerun()

# ============================================================================
# –¢–∞–± 4: –û —Å–∏—Å—Ç–µ–º–µ
# ============================================================================

with tab4:
    st.markdown("""
    ### ‚ÑπÔ∏è –û —Å–∏—Å—Ç–µ–º–µ Web Research Agent
    
    **Web Research Agent** - —ç—Ç–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –≤–µ–±-–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π,
    –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–¥–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.
    
    #### üõ†Ô∏è –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:
    - **Pydantic AI** - —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è AI –∞–≥–µ–Ω—Ç–æ–≤ —Å —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
    - **OpenAI GPT** - —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
    - **Tavily API** - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ –¥–ª—è –≤–µ–±-–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
    - **Streamlit** - —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    
    #### ‚ú® –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - üîç –ì–ª—É–±–æ–∫–∏–π –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
    - üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
    - üß† –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    - üìà –û—Ü–µ–Ω–∫–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    - üè∑Ô∏è –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
    - üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
    
    #### üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ã–≤–æ–¥–∞:
    –°–∏—Å—Ç–µ–º–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–∫–ª—é—á–∞—é—â–∏–µ:
    - –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –Ω–∞—Ö–æ–¥–æ–∫
    - –ö–ª—é—á–µ–≤—ã–µ –Ω–∞—Ö–æ–¥–∫–∏ —Å –æ—Ü–µ–Ω–∫–æ–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    - –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    - –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ (–ª—é–¥–∏, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –º–µ—Å—Ç–∞)
    - –û—Ü–µ–Ω–∫—É —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ —É—Ä–æ–≤–Ω—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    - –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è
    
    #### üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:
    - [Pydantic AI Documentation](https://ai.pydantic.dev/)
    - [Tavily API](https://tavily.com/)
    - [OpenAI Platform](https://platform.openai.com/)
    
    #### üìù –í–µ—Ä—Å–∏—è:
    v1.0.0 - –ê–≤–≥—É—Å—Ç 2025
    """)

# ============================================================================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
# ============================================================================

if 'repeat_query' in st.session_state:
    st.rerun()

# ============================================================================
# Footer
# ============================================================================

st.markdown("---")
st.markdown(
    '<p style="text-align: center; color: #9ca3af;">Built with ‚ù§Ô∏è using Pydantic AI</p>',
    unsafe_allow_html=True
)
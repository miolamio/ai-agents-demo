#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π RAG Agent Examples
–í–∫–ª—é—á–∞–µ—Ç FAISS, ChromaDB –∏ Pinecone
"""

import os
import sys
import time
from dotenv import load_dotenv

load_dotenv()

def show_all_vector_dbs():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö –ë–î"""
    print("üöÄ –ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è RAG Agent Examples")
    print("=" * 60)
    print("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–µ–º—è –≤–µ–∫—Ç–æ—Ä–Ω—ã–º–∏ –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö:")
    print("‚Ä¢ FAISS - –ª–æ–∫–∞–ª—å–Ω–∞—è –≤—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–∞—è –ë–î")
    print("‚Ä¢ ChromaDB - –ø—Ä–æ—Å—Ç–∞—è –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ë–î") 
    print("‚Ä¢ Pinecone - –æ–±–ª–∞—á–Ω–∞—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–∞—è –ë–î")
    print()

def check_api_keys():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö API –∫–ª—é—á–µ–π"""
    print("üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π:")
    print("=" * 25)
    
    keys_status = {}
    
    # OpenAI
    openai_key = os.getenv("OPENAI_API_KEY")
    if openai_key and openai_key != "your_openai_api_key_here":
        keys_status["OpenAI"] = "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω"
    else:
        keys_status["OpenAI"] = "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    
    # Pinecone
    pinecone_key = os.getenv("PINECONE_API_KEY")
    pinecone_host = os.getenv("PINECONE_HOST")
    if pinecone_key and pinecone_key != "your_pinecone_api_key_here" and pinecone_host:
        keys_status["Pinecone"] = "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω (—Å host URL)"
    else:
        keys_status["Pinecone"] = "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    
    # Cohere
    cohere_key = os.getenv("COHERE_API_KEY")
    if cohere_key and cohere_key != "your_cohere_api_key_here":
        keys_status["Cohere"] = "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω"
    else:
        keys_status["Cohere"] = "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    
    # OpenRouter
    openrouter_key = os.getenv("OPENROUTER_API_KEY")
    if openrouter_key and openrouter_key != "your_openrouter_api_key_here":
        keys_status["OpenRouter"] = "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω"
    else:
        keys_status["OpenRouter"] = "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    
    for service, status in keys_status.items():
        print(f"   {service:<12} {status}")
    
    return keys_status

def run_vector_db_comparison():
    """–ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö –ë–î"""
    print("\nüî¨ –ó–∞–ø—É—Å–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö –ë–î:")
    print("=" * 40)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
        from vector_db_comparison import main as vector_main
        vector_main()
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏: {e}")
        return False

def run_rag_agents():
    """–ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é RAG –∞–≥–µ–Ω—Ç–æ–≤"""
    print("\nü§ñ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è RAG –∞–≥–µ–Ω—Ç–æ–≤:")
    print("=" * 35)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ LLM –∫–ª—é—á–∞
    openai_key = os.getenv("OPENAI_API_KEY")
    openrouter_key = os.getenv("OPENROUTER_API_KEY")
    
    if not openai_key and not openrouter_key:
        print("‚ùå –ù–∏ OpenAI, –Ω–∏ OpenRouter –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ RAG –∞–≥–µ–Ω—Ç–æ–≤")
        return False
    
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ MultiSource RAG –∞–≥–µ–Ω—Ç–∞...")
        os.system("python rag_agent_examples.py multi")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ RAG –∞–≥–µ–Ω—Ç–æ–≤: {e}")
        return False

def show_performance_summary():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
    print("=" * 45)
    
    performance_data = {
        "FAISS": {
            "build": "~1.8—Å",
            "search": "~403–º—Å", 
            "accuracy": "85%",
            "best_for": "–í—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞",
            "embedding": "OpenAI (1536 dim)"
        },
        "ChromaDB": {
            "build": "~0.8—Å",
            "search": "~424–º—Å",
            "accuracy": "88%", 
            "best_for": "–ü—Ä–æ—Å—Ç–æ—Ç–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
            "embedding": "OpenAI (1536 dim)"
        },
        "Pinecone": {
            "build": "~43—Å",
            "search": "~614–º—Å",
            "accuracy": "92%",
            "best_for": "–û–±–ª–∞—á–Ω–∞—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å",
            "embedding": "Cohere (1024 dim)"
        }
    }
    
    for db_name, metrics in performance_data.items():
        print(f"\nüîß {db_name}:")
        print(f"   ‚è±Ô∏è  –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ: {metrics['build']}")
        print(f"   üîç –ü–æ–∏—Å–∫: {metrics['search']}")
        print(f"   üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {metrics['accuracy']}")
        print(f"   üß† –≠–º–±–µ–¥–¥–∏–Ω–≥–∏: {metrics['embedding']}")
        print(f"   üí° –õ—É—á—à–µ –¥–ª—è: {metrics['best_for']}")

def show_available_modes():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã"""
    print("\nüöÄ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:")
    print("=" * 40)
    
    modes = [
        ("quick_demo.py", "–ë—ã—Å—Ç—Ä–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è", "–ë–µ–∑ API –∫–ª—é—á–µ–π", "‚úÖ"),
        ("final_demo.py", "–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è", "–ë–µ–∑ API –∫–ª—é—á–µ–π", "‚úÖ"),
        ("vector_db_comparison.py", "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ë–î", "OpenAI + Pinecone + Cohere", "‚úÖ"),
        ("rag_agent_examples.py", "–ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è", "OpenAI/OpenRouter", "‚úÖ"),
        ("rag_agent_examples.py multi", "–ú—É–ª—å—Ç–∏-–∏—Å—Ç–æ—á–Ω–∏–∫–∏", "OpenAI/OpenRouter", "‚úÖ"),
        ("rag_agent_examples.py smart", "–£–º–Ω—ã–π –ø–æ–∏—Å–∫", "OpenAI/OpenRouter", "‚úÖ"),
        ("rag_agent_examples.py compare", "FAISS vs ChromaDB", "OpenAI", "‚úÖ"),
        ("rag_agent_examples.py chat", "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç", "OpenAI/OpenRouter", "‚úÖ"),
        ("rag_agent_examples.py models", "–¢–µ—Å—Ç –º–æ–¥–µ–ª–µ–π", "OpenRouter", "‚úÖ"),
        ("setup_openrouter.py", "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenRouter", "–ë–µ–∑ API", "‚úÖ"),
        ("test_pinecone.py", "–¢–µ—Å—Ç Pinecone", "Pinecone + Cohere", "‚úÖ")
    ]
    
    print("üìã –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞:")
    for command, description, requirements, status in modes:
        print(f"   {status} python {command}")
        print(f"      {description}")
        print(f"      –¢—Ä–µ–±—É–µ—Ç: {requirements}")
        print()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    start_time = time.time()
    
    show_all_vector_dbs()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
    keys_status = check_api_keys()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å
    can_run_vector_comparison = keys_status["OpenAI"] == "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω"
    can_run_pinecone = keys_status["Pinecone"] == "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω (—Å host URL)" and keys_status["Cohere"] == "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω"
    can_run_rag_agents = keys_status["OpenAI"] == "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω" or keys_status["OpenRouter"] == "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω"
    
    print(f"\nüéØ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—Å–∫–∞:")
    print(f"   Vector DB Comparison: {'‚úÖ' if can_run_vector_comparison else '‚ùå'}")
    print(f"   Pinecone (–ø–æ–ª–Ω—ã–π): {'‚úÖ' if can_run_pinecone else '‚ùå'}")
    print(f"   RAG Agents: {'‚úÖ' if can_run_rag_agents else '‚ùå'}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —á—Ç–æ –º–æ–∂–µ–º
    if can_run_vector_comparison:
        print(f"\nüî¨ –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö –ë–î...")
        success = run_vector_db_comparison()
        if success:
            show_performance_summary()
    
    show_available_modes()
    
    elapsed_time = time.time() - start_time
    print(f"\nüéâ –ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed_time:.1f} —Å–µ–∫—É–Ω–¥")
    
    print(f"\nüìã –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞:")
    print(f"   ‚úÖ FAISS: –†–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ")
    print(f"   ‚úÖ ChromaDB: –†–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ") 
    print(f"   ‚úÖ Pinecone: –†–∞–±–æ—Ç–∞–µ—Ç —Å Cohere —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏")
    print(f"   ‚úÖ RAG Agents: –†–∞–±–æ—Ç–∞—é—Ç —Å OpenAI/OpenRouter")
    print(f"   ‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: 6 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, 55 —á–∞–Ω–∫–æ–≤")
    
    print(f"\nüöÄ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")

if __name__ == "__main__":
    main()

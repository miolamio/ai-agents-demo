#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è RAG –∞–≥–µ–Ω—Ç–æ–≤ –±–µ–∑ –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤
"""

import os
import sys
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(__file__))

load_dotenv()

def quick_faiss_chroma_comparison():
    """–ë—ã—Å—Ç—Ä–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ FAISS –∏ ChromaDB –±–µ–∑ OpenAI API"""
    print("üöÄ –ë—ã—Å—Ç—Ä–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è RAG - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ FAISS –∏ ChromaDB")
    print("=" * 60)
    
    try:
        from langchain_community.document_loaders import DirectoryLoader
        from langchain_text_splitters import RecursiveCharacterTextSplitter
        import time
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
        knowledge_base_path = os.path.join(os.path.dirname(__file__), "knowledge_base")
        
        if not os.path.exists(knowledge_base_path):
            print("‚ùå –ü–∞–ø–∫–∞ knowledge_base –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        print("üìö –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã...")
        loader = DirectoryLoader(knowledge_base_path, glob="**/*.md")
        documents = loader.load()
        
        text_splitter = RecursiveCharacterTextSplitter(
            chunk_size=1000,
            chunk_overlap=200
        )
        chunks = text_splitter.split_documents(documents)
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, —Å–æ–∑–¥–∞–Ω–æ {len(chunks)} —á–∞–Ω–∫–æ–≤")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ API –≤—ã–∑–æ–≤–æ–≤
        print(f"\nüìä –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:")
        for i, doc in enumerate(documents[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
            print(f"  {i+1}. {doc.metadata.get('source', 'unknown')}: {len(doc.page_content)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        print(f"\nüîç –ü—Ä–∏–º–µ—Ä—ã —á–∞–Ω–∫–æ–≤:")
        for i, chunk in enumerate(chunks[:2]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 —á–∞–Ω–∫–∞
            print(f"  –ß–∞–Ω–∫ {i+1}: {chunk.page_content[:100]}...")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤
        print(f"\n‚ö° –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
        print(f"  FAISS: ~4-5—Å –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ, ~0.6—Å –ø–æ–∏—Å–∫")
        print(f"  ChromaDB: ~2-3—Å –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ, ~2.5—Å –ø–æ–∏—Å–∫")
        print(f"  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: ChromaDB –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, FAISS –¥–ª—è production")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def quick_knowledge_base_demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    print("\nüìö –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:")
    print("=" * 40)
    
    knowledge_base_path = os.path.join(os.path.dirname(__file__), "knowledge_base")
    
    if not os.path.exists(knowledge_base_path):
        print("‚ùå –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    categories = ["technical_docs", "api_reference", "tutorials"]
    total_files = 0
    
    for category in categories:
        category_path = os.path.join(knowledge_base_path, category)
        if os.path.exists(category_path):
            files = [f for f in os.listdir(category_path) if f.endswith('.md')]
            total_files += len(files)
            print(f"üìÅ {category}: {len(files)} —Ñ–∞–π–ª–æ–≤")
            for file in files:
                file_path = os.path.join(category_path, file)
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                        print(f"   ‚Ä¢ {file}: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                except:
                    print(f"   ‚Ä¢ {file}: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å")
        else:
            print(f"üìÅ {category}: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    print(f"\nüìä –ò—Ç–æ–≥–æ: {total_files} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π")

def show_example_queries():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –±–µ–∑ API –≤—ã–∑–æ–≤–æ–≤"""
    print("\nü§ñ –ü—Ä–∏–º–µ—Ä—ã –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:")
    print("=" * 40)
    
    examples = [
        {
            "query": "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å FAISS –∏–Ω–¥–µ–∫—Å?",
            "source": "api_reference",
            "mock_answer": "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è FAISS –∏–Ω–¥–µ–∫—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ FAISS.from_documents(chunks, embeddings)..."
        },
        {
            "query": "–ß—Ç–æ —Ç–∞–∫–æ–µ ChromaDB?",
            "source": "technical_docs", 
            "mock_answer": "ChromaDB - —ç—Ç–æ open-source –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è..."
        },
        {
            "query": "–û—Å–Ω–æ–≤—ã RAG –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã",
            "source": "tutorials",
            "mock_answer": "RAG –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Ç–µ–∫—Å—Ç–∞. –°–∏—Å—Ç–µ–º–∞ —Å–Ω–∞—á–∞–ª–∞ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã..."
        }
    ]
    
    for i, example in enumerate(examples, 1):
        print(f"\n{i}. ü§î –ó–∞–ø—Ä–æ—Å: {example['query']}")
        print(f"   üìö –ò—Å—Ç–æ—á–Ω–∏–∫: {example['source']}")
        print(f"   ü§ñ –û—Ç–≤–µ—Ç: {example['mock_answer'][:100]}...")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—ã—Å—Ç—Ä–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üéØ RAG Quick Demo - –ë—ã—Å—Ç—Ä–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–µ–∑ API –≤—ã–∑–æ–≤–æ–≤")
    print("=" * 70)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    success = quick_faiss_chroma_comparison()
    
    if success:
        quick_knowledge_base_demo()
        show_example_queries()
        
        print(f"\nüí° –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:")
        print(f"   1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OPENAI_API_KEY –≤ .env —Ñ–∞–π–ª–µ")
        print(f"   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python rag_agent_examples.py")
        print(f"   3. –ò–ª–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç: python rag_agent_examples.py chat")
        
        print(f"\n‚ú® –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã:")
        print(f"   ‚Ä¢ python rag_agent_examples.py multi    - –ú—É–ª—å—Ç–∏-–∏—Å—Ç–æ—á–Ω–∏–∫–∏")
        print(f"   ‚Ä¢ python rag_agent_examples.py smart    - –£–º–Ω—ã–π –ø–æ–∏—Å–∫")
        print(f"   ‚Ä¢ python rag_agent_examples.py compare  - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ë–î")
        print(f"   ‚Ä¢ python rag_agent_examples.py chat     - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç")
    
    print(f"\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    main()

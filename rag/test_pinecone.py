#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Pinecone –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""

import os
from dotenv import load_dotenv

load_dotenv()

def test_pinecone_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Pinecone"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Pinecone –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π
    api_key = os.getenv("PINECONE_API_KEY")
    host = os.getenv("PINECONE_HOST")
    
    if not api_key or api_key == "your_pinecone_api_key_here":
        print("‚ùå PINECONE_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π API –∫–ª—é—á –≤ .env —Ñ–∞–π–ª–µ")
        return False
    
    if not host:
        print("‚ùå PINECONE_HOST –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    print(f"‚úÖ API –∫–ª—é—á: {api_key[:12]}...{api_key[-4:]}")
    print(f"‚úÖ Host: {host}")
    
    try:
        from pinecone import Pinecone
        
        print("\nüîó –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Pinecone –∫–ª–∏–µ–Ω—Ç...")
        pc = Pinecone(api_key=api_key)
        
        print("üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤...")
        indexes = pc.list_indexes()
        
        if hasattr(indexes, 'indexes'):
            index_names = [idx.name for idx in indexes.indexes]
        else:
            index_names = [str(idx) for idx in indexes]
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∏–Ω–¥–µ–∫—Å–æ–≤: {len(index_names)}")
        for name in index_names:
            print(f"   ‚Ä¢ {name}")
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∏–Ω–¥–µ–∫—Å—É —á–µ—Ä–µ–∑ host
        print(f"\nüéØ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∏–Ω–¥–µ–∫—Å—É —á–µ—Ä–µ–∑ host...")
        try:
            index = pc.Index(host=host)
            stats = index.describe_index_stats()
            
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
            print(f"   üìä –í–µ–∫—Ç–æ—Ä–æ–≤: {stats.total_vector_count}")
            print(f"   üìè –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {stats.dimension}")
            print(f"   üìà –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å: {stats.index_fullness}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω–¥–µ–∫—Å—É: {e}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Pinecone: {e}")
        return False

def test_pinecone_with_langchain():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é Pinecone —Å LangChain"""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LangChain + Pinecone")
    print("=" * 40)
    
    if not test_pinecone_connection():
        return False
    
    try:
        from langchain_pinecone import PineconeVectorStore
        from langchain_openai import OpenAIEmbeddings
        from langchain.schema import Document
        from pinecone import Pinecone
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        test_docs = [
            Document(
                page_content="FAISS - —ç—Ç–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–µ–∫—Ç–æ—Ä–æ–≤",
                metadata={"source": "test1.md", "type": "definition"}
            ),
            Document(
                page_content="ChromaDB - —ç—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤",
                metadata={"source": "test2.md", "type": "definition"}
            )
        ]
        
        print("üìö –°–æ–∑–¥–∞–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        api_key = os.getenv("PINECONE_API_KEY")
        host = os.getenv("PINECONE_HOST")
        
        pc = Pinecone(api_key=api_key)
        index = pc.Index(host=host)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Cohere —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ —Å —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å—é 1024 –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∏–Ω–¥–µ–∫—Å–æ–º
        from langchain_cohere import CohereEmbeddings
        embeddings = CohereEmbeddings(model="embed-multilingual-v3.0")
        
        print("üîó –°–æ–∑–¥–∞–µ–º –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ...")
        vectorstore = PineconeVectorStore(
            index=index,
            embedding=embeddings,
            text_key="text",
            namespace="test"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
        print("üìù –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã...")
        texts = [doc.page_content for doc in test_docs]
        metadatas = [doc.metadata for doc in test_docs]
        vectorstore.add_texts(texts, metadatas)
        
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫...")
        results = vectorstore.similarity_search("–±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø–æ–∏—Å–∫–∞", k=1)
        
        if results:
            print(f"‚úÖ –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç! –ù–∞–π–¥–µ–Ω–æ: {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            print(f"   üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç: {results[0].page_content}")
            return True
        else:
            print("‚ùå –ü–æ–∏—Å–∫ –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è LangChain: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Pinecone")
    print("=" * 50)
    
    # –ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    connection_ok = test_pinecone_connection()
    
    if connection_ok:
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å LangChain
        langchain_ok = test_pinecone_with_langchain()
        
        if langchain_ok:
            print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            print("‚úÖ Pinecone –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ vector_db_comparison.py")
        else:
            print("\n‚ö†Ô∏è  –ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å LangChain")
    else:
        print("\n‚ùå –ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏ host URL")

if __name__ == "__main__":
    main()

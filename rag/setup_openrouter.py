#!/usr/bin/env python3
"""
–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ OpenRouter –¥–ª—è RAG –∞–≥–µ–Ω—Ç–æ–≤
"""

import os
from dotenv import load_dotenv

def show_openrouter_setup():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ OpenRouter"""
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenRouter –¥–ª—è RAG –∞–≥–µ–Ω—Ç–æ–≤")
    print("=" * 50)
    
    print("\nüìã –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:")
    print("1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ https://openrouter.ai/")
    print("2. –°–æ–∑–¥–∞–π—Ç–µ API –∫–ª—é—á –≤ —Ä–∞–∑–¥–µ–ª–µ 'Keys'")
    print("3. –î–æ–±–∞–≤—å—Ç–µ –∫—Ä–µ–¥–∏—Ç—ã –Ω–∞ —Å—á–µ—Ç (–º–∏–Ω–∏–º—É–º $5)")
    print("4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ API –∫–ª—é—á")
    
    print("\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å (–ø—Ä–∏–º–µ—Ä–Ω–æ):")
    print("‚Ä¢ Claude 3.5 Sonnet: $3 –∑–∞ 1M —Ç–æ–∫–µ–Ω–æ–≤ –≤—Ö–æ–¥–∞, $15 –∑–∞ 1M —Ç–æ–∫–µ–Ω–æ–≤ –≤—ã—Ö–æ–¥–∞")
    print("‚Ä¢ GPT-4o Mini: $0.15 –∑–∞ 1M —Ç–æ–∫–µ–Ω–æ–≤ –≤—Ö–æ–¥–∞, $0.60 –∑–∞ 1M —Ç–æ–∫–µ–Ω–æ–≤ –≤—ã—Ö–æ–¥–∞")
    print("‚Ä¢ Llama 3.1 8B: $0.05 –∑–∞ 1M —Ç–æ–∫–µ–Ω–æ–≤ (–±–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–æ –ª–∏–º–∏—Ç–∞)")
    print("‚Ä¢ –≠–º–±–µ–¥–¥–∏–Ω–≥–∏: $0.10 –∑–∞ 1M —Ç–æ–∫–µ–Ω–æ–≤")
    
    print("\nüîë –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–∞:")
    print("–í–∞—Ä–∏–∞–Ω—Ç 1 - –ß–µ—Ä–µ–∑ .env —Ñ–∞–π–ª:")
    print("   echo 'OPENROUTER_API_KEY=your_actual_key_here' > .env")
    
    print("\n–í–∞—Ä–∏–∞–Ω—Ç 2 - –ß–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    print("   export OPENROUTER_API_KEY='your_actual_key_here'")
    
    print("\nüìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ –≤ –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ:")
    models = [
        ("anthropic/claude-3.5-sonnet", "–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Ö–æ—Ä–æ—à –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á"),
        ("openai/gpt-4o-mini", "–ë—ã—Å—Ç—Ä–∞—è –∏ –¥–µ—à–µ–≤–∞—è –º–æ–¥–µ–ª—å OpenAI"),
        ("meta-llama/llama-3.1-8b-instruct", "Open source, —á–∞—Å—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è"),
        ("google/gemini-flash-1.5", "–ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å Google"),
        ("openai/text-embedding-ada-002", "–≠–º–±–µ–¥–¥–∏–Ω–≥–∏ OpenAI")
    ]
    
    for model, description in models:
        print(f"   ‚Ä¢ {model}")
        print(f"     {description}")
    
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print("–ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
    print("   python rag_agent_examples.py models")

def check_current_setup():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print("=" * 35)
    
    load_dotenv()
    
    openrouter_key = os.getenv("OPENROUTER_API_KEY")
    openai_key = os.getenv("OPENAI_API_KEY")
    
    if openrouter_key and openrouter_key != "your_openrouter_api_key_here":
        print("‚úÖ OPENROUTER_API_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print(f"   –ö–ª—é—á: {openrouter_key[:12]}...{openrouter_key[-4:]}")
    else:
        print("‚ùå OPENROUTER_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç placeholder")
    
    if openai_key and openai_key != "your_openai_api_key_here":
        print("‚úÖ OPENAI_API_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (fallback)")
        print(f"   –ö–ª—é—á: {openai_key[:12]}...{openai_key[-4:]}")
    else:
        print("‚ùå OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç placeholder")
    
    if not openrouter_key and not openai_key:
        print("\n‚ö†Ô∏è  –ù–∏ –æ–¥–∏–Ω API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        print("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã.")
    elif openrouter_key:
        print("\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ OpenRouter")
        print("   ‚Ä¢ –ë–æ–ª—å—à–µ –º–æ–¥–µ–ª–µ–π –Ω–∞ –≤—ã–±–æ—Ä")
        print("   ‚Ä¢ –ß–∞—Å—Ç–æ –¥–µ—à–µ–≤–ª–µ OpenAI")
        print("   ‚Ä¢ –î–æ—Å—Ç—É–ø –∫ open source –º–æ–¥–µ–ª—è–º")
    else:
        print("\nüéØ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è OpenAI (fallback)")

def test_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
    print("=" * 30)
    
    load_dotenv()
    
    openrouter_key = os.getenv("OPENROUTER_API_KEY")
    
    if not openrouter_key or openrouter_key == "your_openrouter_api_key_here":
        print("‚ùå OPENROUTER_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    try:
        from rag_agent_examples import ChatOpenRouter
        
        print("üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenRouter...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        llm = ChatOpenRouter(
            model_name="openai/gpt-4o-mini",  # –°–∞–º–∞—è –¥–µ—à–µ–≤–∞—è –º–æ–¥–µ–ª—å
            temperature=0,
            max_tokens=50,
            request_timeout=10
        )
        
        response = llm.invoke("–°–∫–∞–∂–∏ '–ü—Ä–∏–≤–µ—Ç' –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ").content
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        print(f"   –û—Ç–≤–µ—Ç: {response}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   ‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞")
        print("   ‚Ä¢ –ù–∞–ª–∏—á–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ —Å—á–µ—Ç—É")
        print("   ‚Ä¢ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    show_openrouter_setup()
    check_current_setup()
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    try:
        test_input = input("\nü§î –•–æ—Ç–∏—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ? (y/n): ").strip().lower()
        if test_input in ['y', 'yes', '–¥–∞', '–¥']:
            test_connection()
    except KeyboardInterrupt:
        print("\nüëã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")

if __name__ == "__main__":
    main()

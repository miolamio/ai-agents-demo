#!/usr/bin/env python3
"""
–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å Pinecone
"""

import os
import time
from dotenv import load_dotenv

load_dotenv()

def demo_pinecone_only():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ Pinecone"""
    print("üå≤ Pinecone Demo - –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–∏
    pinecone_key = os.getenv("PINECONE_API_KEY")
    pinecone_host = os.getenv("PINECONE_HOST")
    cohere_key = os.getenv("COHERE_API_KEY")
    
    if not pinecone_key or not pinecone_host or not cohere_key:
        print("‚ùå –ù–µ –≤—Å–µ –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã:")
        print(f"   PINECONE_API_KEY: {'‚úÖ' if pinecone_key else '‚ùå'}")
        print(f"   PINECONE_HOST: {'‚úÖ' if pinecone_host else '‚ùå'}")
        print(f"   COHERE_API_KEY: {'‚úÖ' if cohere_key else '‚ùå'}")
        return
    
    try:
        from pinecone import Pinecone
        from langchain_pinecone import PineconeVectorStore
        from langchain_cohere import CohereEmbeddings
        from langchain.schema import Document
        
        print("üîó –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pinecone...")
        pc = Pinecone(api_key=pinecone_key)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–¥–µ–∫—Å–∞—Ö
        indexes = pc.list_indexes()
        index_names = [idx.name for idx in indexes.indexes] if hasattr(indexes, 'indexes') else []
        print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã: {index_names}")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —á–µ—Ä–µ–∑ host URL
        print(f"üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∏–Ω–¥–µ–∫—Å—É —á–µ—Ä–µ–∑ host URL...")
        index = pc.Index(host=pinecone_host)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = index.describe_index_stats()
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–¥–µ–∫—Å–∞:")
        print(f"   ‚Ä¢ –í–µ–∫—Ç–æ—Ä–æ–≤: {stats.total_vector_count}")
        print(f"   ‚Ä¢ –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {stats.dimension}")
        print(f"   ‚Ä¢ –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å: {stats.index_fullness}")
        print(f"   ‚Ä¢ Namespaces: {list(stats.namespaces.keys()) if stats.namespaces else []}")
        
        # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
        print(f"üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Cohere —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")
        embeddings = CohereEmbeddings(model="embed-multilingual-v3.0")
        
        # –°–æ–∑–¥–∞–µ–º –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        print(f"üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞...")
        vectorstore = PineconeVectorStore(
            index=index,
            embedding=embeddings,
            text_key="text",
            namespace="demo"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π namespace –¥–ª—è –¥–µ–º–æ
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        test_docs = [
            "FAISS - —ç—Ç–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ Facebook –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–µ–∫—Ç–æ—Ä–æ–≤",
            "ChromaDB - open source –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤", 
            "Pinecone - –æ–±–ª–∞—á–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö",
            "RAG –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞"
        ]
        
        print(f"üìù –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã...")
        vectorstore.add_texts(
            texts=test_docs,
            metadatas=[{"source": f"demo_{i}.md"} for i in range(len(test_docs))]
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫...")
        search_queries = [
            "–≤–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö",
            "–±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø–æ–∏—Å–∫–∞",
            "RAG —Å–∏—Å—Ç–µ–º–∞"
        ]
        
        for query in search_queries:
            start_time = time.time()
            results = vectorstore.similarity_search(query, k=2)
            search_time = time.time() - start_time
            
            print(f"\nüîé –ó–∞–ø—Ä–æ—Å: '{query}'")
            print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {search_time:.3f}—Å")
            print(f"   üìÑ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
            
            for i, result in enumerate(results):
                print(f"   {i+1}. {result.page_content}")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        final_stats = index.describe_index_stats()
        print(f"\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   ‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ–∫—Ç–æ—Ä–æ–≤: {final_stats.total_vector_count}")
        print(f"   ‚Ä¢ Namespaces: {list(final_stats.namespaces.keys()) if final_stats.namespaces else []}")
        
        print(f"\nüéâ Pinecone –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ Pinecone –¥–µ–º–æ: {e}")

if __name__ == "__main__":
    demo_pinecone_only()

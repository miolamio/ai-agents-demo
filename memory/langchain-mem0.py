"""
LangChain + Mem0 Integration Demo
–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —Å –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç—å—é
"""

import os
from datetime import datetime
from typing import List, Dict, Any
from dotenv import load_dotenv

from langchain_openai import ChatOpenAI
from langchain_core.messages import HumanMessage, AIMessage, SystemMessage
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain_core.runnables.history import RunnableWithMessageHistory
from langchain_core.chat_history import BaseChatMessageHistory, InMemoryChatMessageHistory
from langchain_core.runnables import RunnablePassthrough
from mem0 import MemoryClient

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
MEM0_API_KEY = os.getenv("MEM0_API_KEY")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o-mini")
MAX_TOKENS = int(os.getenv("MAX_TOKENS", "2000"))

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if MEM0_API_KEY:
    os.environ["MEM0_API_KEY"] = MEM0_API_KEY
if OPENAI_API_KEY:
    os.environ["OPENAI_API_KEY"] = OPENAI_API_KEY

class PersonalAssistant:
    """–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —Å –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç—å—é"""
    
    def __init__(self, user_id: str):
        self.user_id = user_id
        self.setup_components()
        
    def search_memories(self, query: str, limit: int = 5) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
        if not self.mem0_client:
            return []
            
        try:
            results = self.mem0_client.search(
                query=query, 
                user_id=self.user_id,
                limit=limit,
                output_format="v1.1"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç v1.1
            )
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ v1.1
            if isinstance(results, dict) and 'results' in results:
                return results['results']
            return results if results else []
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
            return []
        
    def setup_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Mem0 –∫–ª–∏–µ–Ω—Ç–∞
        self.mem0_client = None
        if MEM0_API_KEY:
            try:
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º API –∫–ª—é—á–∞
                self.mem0_client = MemoryClient(api_key=MEM0_API_KEY)
                print("‚úÖ Mem0 –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Mem0: {e}")
        else:
            print("‚ö†Ô∏è  MEM0_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω - —Ä–∞–±–æ—Ç–∞ –≤ –¥–µ–º–æ —Ä–µ–∂–∏–º–µ")
            
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
        self.llm = None
        if OPENAI_API_KEY:
            try:
                self.llm = ChatOpenAI(
                    model=OPENAI_MODEL,
                    max_tokens=MAX_TOKENS,
                    temperature=0.7
                )
                print(f"‚úÖ OpenAI –º–æ–¥–µ–ª—å {OPENAI_MODEL} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenAI: {e}")
        else:
            print("‚ö†Ô∏è  OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        # –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        self.session_history = InMemoryChatMessageHistory()
        
        self.setup_conversation_chain()
        
    def setup_conversation_chain(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–ø–æ—á–∫–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        if not self.llm:
            return
            
        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
        system_prompt = """–¢—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –¢–≤–æ—è –∑–∞–¥–∞—á–∞:

1. –í–µ—Å—Ç–∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä
2. –ó–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–∂–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–∏–Ω—Ç–µ—Ä–µ—Å—ã, –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, –ø–ª–∞–Ω—ã, –ª–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
4. –ó–∞–¥–∞–≤–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

–í–ê–ñ–ù–´–ï –§–ê–ö–¢–´ –î–õ–Ø –ó–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø:
- –õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–∏–º—è, –≤–æ–∑—Ä–∞—Å—Ç, –ø—Ä–æ—Ñ–µ—Å—Å–∏—è, —Å–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ)
- –ò–Ω—Ç–µ—Ä–µ—Å—ã –∏ —Ö–æ–±–±–∏
- –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è (–µ–¥–∞, –º—É–∑—ã–∫–∞, —Ñ–∏–ª—å–º—ã, –∫–Ω–∏–≥–∏)
- –¶–µ–ª–∏ –∏ –ø–ª–∞–Ω—ã
- –í–∞–∂–Ω—ã–µ –¥–∞—Ç—ã –∏ —Å–æ–±—ã—Ç–∏—è
- –ö–æ–Ω—Ç–∞–∫—Ç—ã –∏ —Å–≤—è–∑–∏
- –ü—Ä–æ–±–ª–µ–º—ã –∏ –∑–∞–±–æ—Ç—ã

–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏: {memory_context}

–û—Ç–≤–µ—á–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø–∞–º—è—Ç–∏ –∫–æ–≥–¥–∞ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ."""

        self.prompt = ChatPromptTemplate.from_messages([
            ("system", system_prompt),
            MessagesPlaceholder(variable_name="history"),
            ("human", "{input}")
        ])
        
        # –°–æ–∑–¥–∞–µ–º —Ü–µ–ø–æ—á–∫—É —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º
        self.chain = self.prompt | self.llm
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º runnable with message history
        def get_session_history(session_id: str) -> BaseChatMessageHistory:
            return self.session_history
            
        self.conversation = RunnableWithMessageHistory(
            self.chain,
            get_session_history,
            input_messages_key="input",
            history_messages_key="history",
        )
    
    def get_long_term_memory(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        if not self.mem0_client:
            return "–î–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–¥–µ–º–æ —Ä–µ–∂–∏–º)"
            
        try:
            memories = self.mem0_client.get_all(
                user_id=self.user_id,
                output_format="v1.1"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç v1.1
            )
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ v1.1
            if isinstance(memories, dict) and 'results' in memories:
                memory_list = memories['results']
            else:
                memory_list = memories if memories else []
                
            if not memory_list:
                return "–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π"
                
            memory_text = "–ß—Ç–æ —è –ø–æ–º–Ω—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n"
            for i, memory in enumerate(memory_list[:10], 1):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ memory –Ω–µ None
                if not memory or not isinstance(memory, dict):
                    continue
                    
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö v1.1
                content = memory.get('memory', memory.get('text', memory.get('content', '')))
                
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                metadata = memory.get('metadata', {})
                if metadata and isinstance(metadata, dict):
                    category = metadata.get('category', '')
                else:
                    category = ''
                    
                if category:
                    memory_text += f"{i}. [{category}] {content}\n"
                else:
                    memory_text += f"{i}. {content}\n"
                
            return memory_text
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
            return "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏"
    
    def save_to_long_term_memory(self, conversation_history: List[Dict]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –≤ –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å"""
        if not self.mem0_client:
            print("‚ö†Ô∏è  –î–µ–º–æ —Ä–µ–∂–∏–º: –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è")
            return
            
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ª—É—á—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            result = self.mem0_client.add(
                messages=conversation_history, 
                user_id=self.user_id,
                output_format="v1.1",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç v1.1
                metadata={
                    "category": "conversation",
                    "timestamp": datetime.now().isoformat(),
                    "source": "langchain_assistant"
                }
            )
            print("üíæ –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
    
    def chat(self, user_input: str) -> str:
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —á–∞—Ç–∞"""
        if not self.llm:
            return "‚ùå OpenAI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á."
            
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
            relevant_memories = self.search_memories(user_input, limit=3)
            if relevant_memories:
                memory_context = "–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n"
                for i, memory in enumerate(relevant_memories, 1):
                    if memory and isinstance(memory, dict):
                        content = memory.get('memory', memory.get('text', ''))
                        memory_context += f"{i}. {content}\n"
            else:
                # Fallback –∫ –æ–±—â–µ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –ø–∞–º—è—Ç–∏
                memory_context = self.get_long_term_memory()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –Ω–æ–≤—ã–º API
            response = self.conversation.invoke(
                {
                    "input": user_input,
                    "memory_context": memory_context
                },
                config={"configurable": {"session_id": self.user_id}}
            )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
            response_text = response.content if hasattr(response, 'content') else str(response)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–º–µ–Ω –≤ –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å
            conversation_exchange = [
                {"role": "user", "content": user_input},
                {"role": "assistant", "content": response_text}
            ]
            self.save_to_long_term_memory(conversation_exchange)
            
            return response_text
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}"
    
    def show_memories(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        print(f"\nüß† –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {self.user_id}:")
        print("=" * 50)
        
        if not self.mem0_client:
            print("‚ö†Ô∏è  –î–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–¥–µ–º–æ —Ä–µ–∂–∏–º)")
            return
            
        try:
            memories = self.mem0_client.get_all(
                user_id=self.user_id,
                output_format="v1.1"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç v1.1
            )
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ v1.1 - –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–æ–≤–∞—Ä–µ —Å –∫–ª—é—á–æ–º 'results'
            if isinstance(memories, dict):
                if 'results' in memories:
                    memory_list = memories['results']
                else:
                    memory_list = [memories]  # –ï—Å–ª–∏ —ç—Ç–æ –µ–¥–∏–Ω–∏—á–Ω–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            else:
                memory_list = memories if memories else []
            
            if not memory_list:
                print("üìù –ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π")
                return
                
            for i, memory in enumerate(memory_list, 1):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ memory –Ω–µ None
                if not memory or not isinstance(memory, dict):
                    continue
                    
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö v1.1
                content = memory.get('memory', memory.get('text', memory.get('content', '')))
                created = memory.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                metadata = memory.get('metadata', {})
                if metadata and isinstance(metadata, dict):
                    category = metadata.get('category', '')
                    source = metadata.get('source', '')
                else:
                    category = ''
                    source = ''
                
                if category:
                    print(f"{i}. [{category}] {content}")
                else:
                    print(f"{i}. {content}")
                    
                print(f"   –°–æ–∑–¥–∞–Ω–æ: {created}")
                if source:
                    print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {source}")
                print("-" * 30)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
    
    def clear_memories(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)"""
        if not self.mem0_client:
            print("‚ö†Ô∏è  –î–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
            
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
            memories = self.mem0_client.get_all(
                user_id=self.user_id,
                output_format="v1.1"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç v1.1
            )
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ v1.1
            if isinstance(memories, dict) and 'results' in memories:
                memory_list = memories['results']
            else:
                memory_list = memories if memories else []
            
            # –£–¥–∞–ª—è–µ–º –∫–∞–∂–¥–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            for memory in memory_list:
                if memory and isinstance(memory, dict):
                    memory_id = memory.get('id')
                    if memory_id:
                        self.mem0_client.delete(memory_id)
                    
            print(f"üóëÔ∏è  –í—Å–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.user_id} —É–¥–∞–ª–µ–Ω—ã")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

def interactive_chat():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç —Å –ø–æ–º–æ—â–Ω–∏–∫–æ–º"""
    print("ü§ñ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —Å –ø–∞–º—è—Ç—å—é")
    print("=" * 50)
    
    # –ó–∞–ø—Ä–æ—Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = input("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à ID (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è demo_user): ").strip()
    if not user_id:
        user_id = "demo_user"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–º–æ—â–Ω–∏–∫–∞
    assistant = PersonalAssistant(user_id)
    
    print(f"\nüéØ –ß–∞—Ç —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º –Ω–∞—á–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
    print("üí° –ö–æ–º–∞–Ω–¥—ã:")
    print("   /memories - –ø–æ–∫–∞–∑–∞—Ç—å –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è")
    print("   /search <–∑–∞–ø—Ä–æ—Å> - –ø–æ–∏—Å–∫ –≤ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö")
    print("   /clear - –æ—á–∏—Å—Ç–∏—Ç—å –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è") 
    print("   /quit - –≤—ã–π—Ç–∏")
    print("-" * 50)
    
    while True:
        try:
            user_input = input(f"\n{user_id}: ").strip()
            
            if not user_input:
                continue
                
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            if user_input.lower() == '/quit':
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            elif user_input.lower() == '/memories':
                assistant.show_memories()
                continue
            elif user_input.lower().startswith('/search '):
                search_query = user_input[8:].strip()  # –£–±–∏—Ä–∞–µ–º '/search '
                if search_query:
                    print(f"üîç –ü–æ–∏—Å–∫ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{search_query}'")
                    results = assistant.search_memories(search_query)
                    if results:
                        print("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
                        for i, memory in enumerate(results, 1):
                            if memory and isinstance(memory, dict):
                                content = memory.get('memory', memory.get('text', ''))
                                print(f"{i}. {content}")
                    else:
                        print("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                else:
                    print("‚ùå –£–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞: /search <–≤–∞—à –∑–∞–ø—Ä–æ—Å>")
                continue
            elif user_input.lower() == '/clear':
                confirm = input("‚ö†Ô∏è  –í—ã —É–≤–µ—Ä–µ–Ω—ã? –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è (y/N): ")
                if confirm.lower() == 'y':
                    assistant.clear_memories()
                continue
            
            # –û–±—ã—á–Ω—ã–π —á–∞—Ç
            print("ü§ñ –ü–æ–º–æ—â–Ω–∏–∫: ", end="", flush=True)
            response = assistant.chat(user_input)
            print(response)
            
        except KeyboardInterrupt:
            print("\nüëã –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—é")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def demo_conversation():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –¥–∏–∞–ª–æ–≥–æ–º"""
    print("üé¨ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –ø–æ–º–æ—â–Ω–∏–∫–∞")
    print("=" * 50)
    
    assistant = PersonalAssistant("demo_user")
    
    # –ü—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    demo_messages = [
        "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å–µ–π, –º–Ω–µ 28 –ª–µ—Ç",
        "–Ø —Ä–∞–±–æ—Ç–∞—é –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º –≤ IT –∫–æ–º–ø–∞–Ω–∏–∏",
        "–ú–æ–µ —Ö–æ–±–±–∏ - —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è",
        "–ü–ª–∞–Ω–∏—Ä—É—é –ø–æ–µ—Ö–∞—Ç—å –≤ –Ø–ø–æ–Ω–∏—é –≤ —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É",
        "–õ—é–±–ª—é —á–∏—Ç–∞—Ç—å –Ω–∞—É—á–Ω—É—é —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫—É",
        "–£ –º–µ–Ω—è –µ—Å—Ç—å –∫–æ—Ç –ø–æ –∏–º–µ–Ω–∏ –ë–∞—Ä—Å–∏–∫"
    ]
    
    print("–°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:")
    for message in demo_messages:
        print(f"\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message}")
        response = assistant.chat(message)
        print(f"ü§ñ –ü–æ–º–æ—â–Ω–∏–∫: {response}")
        
    print(f"\n{'='*50}")
    print("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
    assistant.show_memories()

if __name__ == "__main__":
    print("üß† LangChain + Mem0 Integration Demo")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API –∫–ª—é—á–µ–π
    print("üìã –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:")
    print(f"   MEM0_API_KEY: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if MEM0_API_KEY else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}")
    print(f"   OPENAI_API_KEY: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if OPENAI_API_KEY else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}")
    print(f"   –ú–æ–¥–µ–ª—å OpenAI: {OPENAI_MODEL}")
    print(f"   –ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤: {MAX_TOKENS}")
    
    if not OPENAI_API_KEY:
        print("\n‚ö†Ô∏è  –î–ª—è —Ä–∞–±–æ—Ç—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è OPENAI_API_KEY!")
        print("1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ env.example –≤ .env")
        print("2. –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à–∏ API –∫–ª—é—á–∏ –≤ .env —Ñ–∞–π–ª")
        exit(1)
    
    print("\n" + "=" * 60)
    
    # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞
    mode = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:\n1. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç\n2. –î–µ–º–æ —Ä–∞–∑–≥–æ–≤–æ—Ä\n–í–∞—à –≤—ã–±–æ—Ä (1/2): ").strip()
    
    if mode == "2":
        demo_conversation()
    else:
        interactive_chat()

"""
CrewAI + Mem0 Integration Demo
–°–∏—Å—Ç–µ–º–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π —Å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–π –ø–∞–º—è—Ç—å—é
"""

import os
from dotenv import load_dotenv
from mem0 import MemoryClient
from crewai import Agent, Task, Crew, Process
from crewai_tools import SerperDevTool

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API –∫–ª—é—á–µ–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
MEM0_API_KEY = os.getenv("MEM0_API_KEY")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
SERPER_API_KEY = os.getenv("SERPER_API_KEY")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o-mini")
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO")
MAX_TOKENS = int(os.getenv("MAX_TOKENS", "2000"))

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if MEM0_API_KEY:
    os.environ["MEM0_API_KEY"] = MEM0_API_KEY
if OPENAI_API_KEY:
    os.environ["OPENAI_API_KEY"] = OPENAI_API_KEY
if SERPER_API_KEY:
    os.environ["SERPER_API_KEY"] = SERPER_API_KEY

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Mem0 –∫–ª–∏–µ–Ω—Ç–∞
client = None
if MEM0_API_KEY:
    try:
        client = MemoryClient()
        print("‚úÖ Mem0 –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Mem0 –∫–ª–∏–µ–Ω—Ç–∞: {e}")
else:
    print("‚ö†Ô∏è  MEM0_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

def store_user_preferences(user_id: str, conversation: list):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
    if client:
        try:
            client.add(conversation, user_id=user_id)
            print(f"‚úÖ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: {e}")
    else:
        print(f"‚ö†Ô∏è  –î–µ–º–æ —Ä–µ–∂–∏–º: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        for msg in conversation:
            print(f"  {msg['role']}: {msg['content']}")

def get_user_preferences(user_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if client:
        try:
            preferences = client.get_all(user_id=user_id)
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {len(preferences)} –∑–∞–ø–∏—Å–µ–π")
            return preferences
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: {e}")
            return []
    else:
        print(f"‚ö†Ô∏è  –î–µ–º–æ —Ä–µ–∂–∏–º: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return []

def create_travel_agent():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –ø–æ–∏—Å–∫–∞"""
    tools = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–∏—Å–∫–∞, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω SERPER_API_KEY
    if SERPER_API_KEY:
        try:
            search_tool = SerperDevTool()
            tools.append(search_tool)
            print("‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–∏—Å–∫–∞ SerperDev –¥–æ–±–∞–≤–ª–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SerperDev: {e}")
    else:
        print("‚ö†Ô∏è  SERPER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω, –∞–≥–µ–Ω—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –ø–æ–∏—Å–∫–∞")

    return Agent(
        role="–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π",
        goal="–ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã",
        backstory="""–í—ã –æ–ø—ã—Ç–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π, –∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–≤–æ–∏–º 
        —Å–∫—Ä—É–ø—É–ª–µ–∑–Ω—ã–º –≤–Ω–∏–º–∞–Ω–∏–µ–º –∫ –¥–µ—Ç–∞–ª—è–º –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é —Å–æ–∑–¥–∞–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ 
        –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–æ–≤.""",
        allow_delegation=False,
        memory=True,
        tools=tools if tools else None,
        verbose=True
    )

def create_planning_task(agent, destination: str, user_preferences: str = ""):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"""
    preferences_context = f"\n\n–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_preferences}" if user_preferences else ""
    
    return Task(
        description=f"""–ù–∞–π–¥–∏—Ç–µ –º–µ—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è, –ø–∏—Ç–∞–Ω–∏—è –∏ –ø–æ—Å–µ—â–µ–Ω–∏—è –≤ {destination}.
        –£—á—Ç–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:
        - –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –º–µ—Å—Ç–∞—Ö
        - –£—á–∏—Ç—ã–≤–∞–π—Ç–µ –±—é–¥–∂–µ—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –ø—Ä–µ–º–∏—É–º –æ–ø—Ü–∏–∏
        - –í–∫–ª—é—á–∏—Ç–µ –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
        - –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É{preferences_context}""",
        expected_output=f"–ü–æ–¥—Ä–æ–±–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–µ—Å—Ç –¥–ª—è –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è, –ø–∏—Ç–∞–Ω–∏—è –∏ –ø–æ—Å–µ—â–µ–Ω–∏—è –≤ {destination} —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.",
        agent=agent,
    )

def setup_crew(agents: list, tasks: list, user_id: str):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –ø–∞–º—è—Ç–∏ Mem0"""
    return Crew(
        agents=agents,
        tasks=tasks,
        process=Process.sequential,
        memory=True,
        memory_config={
            "provider": "mem0",
            "config": {"user_id": user_id},
        },
        verbose=True
    )

def plan_trip(destination: str, user_id: str):
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"""
    print(f"üåç –ù–∞—á–∏–Ω–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏ –≤ {destination} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_preferences = get_user_preferences(user_id)
    preferences_text = ""
    if user_preferences:
        preferences_text = "\n".join([pref.get('content', '') for pref in user_preferences])
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
    travel_agent = create_travel_agent()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
    planning_task = create_planning_task(travel_agent, destination, preferences_text)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥—ã
    crew = setup_crew([travel_agent], [planning_task], user_id)
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
    try:
        result = crew.kickoff()
        print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        return result
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ–µ–∑–¥–∫—É –≤ {destination}. –û—à–∏–±–∫–∞: {e}"

def demo_conversation_storage():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏"""
    print("üíæ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    
    # –ü—Ä–∏–º–µ—Ä —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏
    messages = [
        {
            "role": "user",
            "content": "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–ª–∞–Ω–∏—Ä—É—é –æ—Ç–ø—É—Å–∫ –∏ –º–Ω–µ –Ω—É–∂–µ–Ω —Å–æ–≤–µ—Ç.",
        },
        {
            "role": "assistant", 
            "content": "–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ—Ç–ø—É—Å–∫–∞. –ö–∞–∫–æ–π —Ç–∏–ø –º–µ—Å—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?",
        },
        {
            "role": "user", 
            "content": "–Ø –±–æ–ª—å—à–µ –ª—é–±–ª—é –ø–ª—è–∂–Ω—ã–π –æ—Ç–¥—ã—Ö, —á–µ–º –≥–æ—Ä—ã."
        },
        {
            "role": "assistant",
            "content": "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ. –í—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –æ—Ç–µ–ª–∏ –∏–ª–∏ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã?",
        },
        {
            "role": "user", 
            "content": "–ú–Ω–µ –±–æ–ª—å—à–µ –Ω—Ä–∞–≤—è—Ç—Å—è –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ Airbnb."
        },
        {
            "role": "user",
            "content": "–¢–∞–∫–∂–µ —è –≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω–µ—Ü –∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é —ç–∫–æ–ª–æ–≥–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã."
        }
    ]
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
    store_user_preferences("travel_user_1", messages)
    return messages

if __name__ == "__main__":
    print("üéØ CrewAI + Mem0 Integration Demo")
    print("=" * 50)
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
    demo_conversation_storage()
    print("\n" + "=" * 50)
    
    # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏
    destination = "–ë–∞–ª–∏, –ò–Ω–¥–æ–Ω–µ–∑–∏—è"
    user_id = "travel_user_1"
    
    result = plan_trip(destination, user_id)
    print(f"\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n{result}")
    
    print("\n" + "=" * 50)
    print("üîß –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:")
    print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
    print("2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ env.example –≤ .env: cp env.example .env")
    print("3. –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á–∏ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ .env —Ñ–∞–π–ª:")
    print("   - Mem0 Platform: https://platform.mem0.ai/")
    print("   - OpenAI: https://platform.openai.com/")
    print("   - Serper Dev: https://serper.dev/")
    print("4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞: python crewai-mem0.py")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å API –∫–ª—é—á–µ–π
    print("\nüìã –°—Ç–∞—Ç—É—Å API –∫–ª—é—á–µ–π:")
    print(f"   MEM0_API_KEY: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if MEM0_API_KEY else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}")
    print(f"   OPENAI_API_KEY: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if OPENAI_API_KEY else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}")
    print(f"   SERPER_API_KEY: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if SERPER_API_KEY else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}")
    print(f"   –ú–æ–¥–µ–ª—å OpenAI: {OPENAI_MODEL}")
    print(f"   –ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤: {MAX_TOKENS}")

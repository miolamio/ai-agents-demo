#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Zep Cloud Memory
–ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ Zep
"""

import os
import asyncio
import uuid
from dotenv import load_dotenv

# Zep imports
from zep_cloud.client import AsyncZep
from zep_cloud import Message

# LangChain imports
from langchain_openai import ChatOpenAI
from langchain_core.messages import HumanMessage, AIMessage

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

async def quick_zep_demo():
    """–ë—ã—Å—Ç—Ä–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ Zep"""
    print("üöÄ –ë—ã—Å—Ç—Ä–∞—è –¥–µ–º–æ Zep Cloud Memory")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
    zep_key = os.getenv("ZEP_API_KEY")
    openai_key = os.getenv("OPENAI_API_KEY")
    
    print(f"Zep API: {'‚úÖ' if zep_key else '‚ùå'}")
    print(f"OpenAI API: {'‚úÖ' if openai_key else '‚ùå'}")
    
    if not zep_key:
        print("\n‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è ZEP_API_KEY –¥–ª—è —Ä–∞–±–æ—Ç—ã")
        print("–ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –Ω–∞: https://www.getzep.com/")
        return
        
    if not openai_key:
        print("\n‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è OPENAI_API_KEY –¥–ª—è —Ä–∞–±–æ—Ç—ã")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
    try:
        zep = AsyncZep(api_key=zep_key)
        llm = ChatOpenAI(model="gpt-4o-mini", temperature=0.7)
        print("‚úÖ –ö–ª–∏–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ—Ç–æ–∫–∞
    user_id = "demo_user_" + str(uuid.uuid4())[:8]
    thread_id = str(uuid.uuid4())
    
    print(f"\nüë§ User ID: {user_id}")
    print(f"üîó Thread ID: {thread_id}")
    
    # –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ—Ç–æ–∫ –≤ Zep
    try:
        print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Zep...")
        await zep.user.add(
            user_id=user_id,
            first_name="–î–º–∏—Ç—Ä–∏–π",
            last_name="–¢–µ—Å—Ç–æ–≤—ã–π"
        )
        print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω")
        
        print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –≤ Zep...")
        await zep.thread.create(
            thread_id=thread_id,
            user_id=user_id
        )
        print("‚úÖ –ü–æ—Ç–æ–∫ —Å–æ–∑–¥–∞–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/–ø–æ—Ç–æ–∫–∞: {e}")
        return
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    conversations = [
        {
            "user": "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –î–º–∏—Ç—Ä–∏–π, —è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞.",
            "context": "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
        },
        {
            "user": "–ú–Ω–µ 30 –ª–µ—Ç, —Ä–∞–±–æ—Ç–∞—é –≤ —Å—Ç–∞—Ä—Ç–∞–ø–µ, —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é –º–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.",
            "context": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–µ"
        },
        {
            "user": "–£–≤–ª–µ–∫–∞—é—Å—å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º –∏ –º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º.",
            "context": "–•–æ–±–±–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã"
        },
        {
            "user": "–£ –º–µ–Ω—è –µ—Å—Ç—å —Å–æ–±–∞–∫–∞ –ø–æ—Ä–æ–¥—ã –ª–∞–±—Ä–∞–¥–æ—Ä –ø–æ –∫–ª–∏—á–∫–µ –†–µ–∫—Å.",
            "context": "–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
        }
    ]
    
    print(f"\nüí¨ –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞:")
    print("-" * 40)
    
    # –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ Zep
    for i, conv in enumerate(conversations, 1):
        user_message = conv["user"]
        print(f"\n{i}. üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM
        try:
            response = await llm.ainvoke([HumanMessage(content=user_message)])
            ai_response = response.content
            print(f"   ü§ñ –ü–æ–º–æ—â–Ω–∏–∫: {ai_response}")
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Zep
            messages_to_save = [
                Message(
                    role="user",
                    name="–î–º–∏—Ç—Ä–∏–π",
                    content=user_message
                ),
                Message(
                    role="assistant", 
                    content=ai_response
                )
            ]
            
            await zep.thread.add_messages(
                thread_id=thread_id,
                messages=messages_to_save,
            )
            print("   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Zep")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        await asyncio.sleep(0.5)
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
    print(f"\nüß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:")
    print("-" * 40)
    
    try:
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Zep
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Zep...")
        await asyncio.sleep(2)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        memory = await zep.thread.get_user_context(thread_id=thread_id)
        
        print("üìã –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ Zep:")
        if memory and memory.context:
            print(memory.context)
        else:
            print("–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–∫–∞ –ø—É—Å—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –¥–∞–Ω–Ω—ã–µ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è.")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç)
        if memory and memory.context:
            test_questions = [
                "–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç –∏ –æ—Ç–∫—É–¥–∞ —è?",
                "–ì–¥–µ —è —Ä–∞–±–æ—Ç–∞—é –∏ —á—Ç–æ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é?", 
                "–ß–µ–º —è —É–≤–ª–µ–∫–∞—é—Å—å?",
                "–ï—Å—Ç—å –ª–∏ —É –º–µ–Ω—è –ø–∏—Ç–æ–º—Ü—ã?"
            ]
            
            print(f"\n‚ùì –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã:")
            for i, question in enumerate(test_questions, 1):
                print(f"\n{i}. –í–æ–ø—Ä–æ—Å: {question}")
                
                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
                prompt = f"""–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
                
–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
{memory.context}

–í–æ–ø—Ä–æ—Å: {question}

–û—Ç–≤–µ—Ç:"""
                
                try:
                    response = await llm.ainvoke([HumanMessage(content=prompt)])
                    print(f"   –û—Ç–≤–µ—Ç: {response.content}")
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: {e}")
        else:
            print("\n‚è≥ –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ - –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤")
        
        # –ü–æ–∏—Å–∫ —Ñ–∞–∫—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç)
        if memory and memory.context:
            print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Ñ–∞–∫—Ç–æ–≤:")
            search_queries = ["—Ä–∞–±–æ—Ç–∞", "–ø–∏—Ç–æ–º–µ—Ü", "—Ö–æ–±–±–∏"]
            
            for query in search_queries:
                try:
                    facts = await zep.graph.search(
                        user_id=user_id,
                        query=query,
                        limit=3
                    )
                    print(f"\nüîé –ü–æ–∏—Å–∫ '{query}':")
                    if facts:
                        for item in facts:
                            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–∫—Ç –∏–ª–∏ –¥—Ä—É–≥—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                            if hasattr(item, 'fact'):
                                print(f"   ‚Ä¢ –§–∞–∫—Ç: {item.fact}")
                            elif hasattr(item, 'summary'):
                                print(f"   ‚Ä¢ –£–∑–µ–ª: {item.summary}")
                            elif hasattr(item, 'content'):
                                print(f"   ‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç: {item.content}")
                            else:
                                print(f"   ‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç: {item}")
                    else:
                        print(f"   üì≠ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ '{query}': {e}")
        else:
            print(f"\n‚è≥ –ü—Ä–æ–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ —Ñ–∞–∫—Ç–æ–≤ - –¥–∞–Ω–Ω—ã–µ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏: {e}")
    
    print(f"\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async def cleanup_demo_data():
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"""
    print("üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—á–∏—Å—Ç–∫–∏
    print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ–º–æ")
    print("2. –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
    
    choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1 –∏–ª–∏ 2): ").strip()
    
    if choice == "1":
        asyncio.run(quick_zep_demo())
    elif choice == "2":
        asyncio.run(cleanup_demo_data())
    else:
        print("–ó–∞–ø—É—Å–∫ –¥–µ–º–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
        asyncio.run(quick_zep_demo())

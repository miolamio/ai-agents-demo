#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è LangChain + Mem0 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
–ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
"""

import os
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI
from mem0 import MemoryClient

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def quick_demo():
    """–ë—ã—Å—Ç—Ä–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    print("üöÄ –ë—ã—Å—Ç—Ä–∞—è –¥–µ–º–æ LangChain + Mem0")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
    openai_key = os.getenv("OPENAI_API_KEY")
    mem0_key = os.getenv("MEM0_API_KEY")
    
    print(f"OpenAI API: {'‚úÖ' if openai_key else '‚ùå'}")
    print(f"Mem0 API: {'‚úÖ' if mem0_key else '‚ùå'}")
    
    if not openai_key:
        print("\n‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è OPENAI_API_KEY –¥–ª—è —Ä–∞–±–æ—Ç—ã")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    llm = ChatOpenAI(model="gpt-4o-mini", temperature=0.7)
    
    mem0_client = None
    if mem0_key:
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º API –∫–ª—é—á–∞
            mem0_client = MemoryClient(api_key=mem0_key)
            print("‚úÖ Mem0 –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è Mem0 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    # –ü—Ä–æ—Å—Ç–æ–π –¥–∏–∞–ª–æ–≥
    user_id = "demo_user"
    messages = [
        "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–Ω–∞, —è —É—á–∏—Ç–µ–ª—å –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏",
        "–ú–Ω–µ 32 –≥–æ–¥–∞, –∂–∏–≤—É –≤ –ú–æ—Å–∫–≤–µ", 
        "–õ—é–±–ª—é —á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥–∏ –ø–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏",
        "–ü–ª–∞–Ω–∏—Ä—É—é –∏–∑—É—á–∞—Ç—å Python –¥–ª—è —Ä–∞–±–æ—Ç—ã"
    ]
    
    print(f"\nüí¨ –î–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}:")
    print("-" * 40)
    
    for msg in messages:
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {msg}")
        
        # –û—Ç–≤–µ—Ç –æ—Ç LLM
        response = llm.invoke(f"–û—Ç–≤–µ—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg}")
        print(f"ü§ñ –ü–æ–º–æ—â–Ω–∏–∫: {response.content}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Mem0
        if mem0_client:
            try:
                conversation = [
                    {"role": "user", "content": msg},
                    {"role": "assistant", "content": response.content}
                ]
                mem0_client.add(messages=conversation, user_id=user_id)
                print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ø–∞–º—è—Ç—å")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        
        print("-" * 30)
    
    # –ü–æ–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
    if mem0_client:
        try:
            memories = mem0_client.get_all(user_id=user_id)
            if memories:
                print(f"\nüß† –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è ({len(memories)} —à—Ç.):")
                for i, memory in enumerate(memories[:5], 1):
                    if memory and isinstance(memory, dict):
                        content = memory.get('memory', memory.get('text', memory.get('content', '')))
                        print(f"{i}. {content}")
            else:
                print("\nüß† –ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
    
    print(f"\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    quick_demo()

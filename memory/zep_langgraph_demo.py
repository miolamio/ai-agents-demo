#!/usr/bin/env python3
"""
Zep + LangGraph Memory Integration Demo
–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ —Å –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç—å—é

–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: https://help.getzep.com/ecosystem/langgraph-memory

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–∞—è –ø–∞–º—è—Ç—å —á–µ—Ä–µ–∑ Zep Cloud
- –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∑–∞–≤–∏—Å–∏–º—ã–µ –æ—Ç–≤–µ—Ç—ã
- –ü–æ–∏—Å–∫ —Ñ–∞–∫—Ç–æ–≤ –∏ —Å—É—â–Ω–æ—Å—Ç–µ–π
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å LangGraph –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
"""

import os
import asyncio
import uuid
from typing import TypedDict, Annotated
from dotenv import load_dotenv

# Zep imports
from zep_cloud.client import AsyncZep
from zep_cloud import Message

# LangChain imports  
from langchain_core.messages import AIMessage, SystemMessage, HumanMessage, trim_messages
from langchain_core.tools import tool
from langchain_openai import ChatOpenAI

# LangGraph imports
from langgraph.checkpoint.memory import MemorySaver
from langgraph.graph import END, START, StateGraph, add_messages
from langgraph.prebuilt import ToolNode

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
def check_api_keys():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö API –∫–ª—é—á–µ–π"""
    zep_key = os.getenv('ZEP_API_KEY')
    openai_key = os.getenv('OPENAI_API_KEY')
    
    print("üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π:")
    print(f"Zep API: {'‚úÖ' if zep_key else '‚ùå'}")
    print(f"OpenAI API: {'‚úÖ' if openai_key else '‚ùå'}")
    
    if not zep_key:
        raise ValueError("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è ZEP_API_KEY. –ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –Ω–∞ https://www.getzep.com/")
    if not openai_key:
        raise ValueError("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è OPENAI_API_KEY. –ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –Ω–∞ https://platform.openai.com/")
    
    return zep_key, openai_key

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
zep_key, openai_key = check_api_keys()
zep = AsyncZep(api_key=zep_key)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≥–µ–Ω—Ç–∞
class State(TypedDict):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ LangGraph"""
    messages: Annotated[list, add_messages]
    first_name: str
    last_name: str
    thread_id: str
    user_name: str

# –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ Zep
@tool
async def search_facts(state: State, query: str, limit: int = 5) -> list[str]:
    """–ü–æ–∏—Å–∫ —Ñ–∞–∫—Ç–æ–≤ –≤–æ –≤—Å–µ—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–∞—Ö —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    
    Args:
        state (State): –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞.
        query (str): –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.
        limit (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5.
        
    Returns:
        list: –°–ø–∏—Å–æ–∫ —Ñ–∞–∫—Ç–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å—É.
    """
    try:
        edges = await zep.graph.search(
            user_id=state["user_name"], 
            query=query, 
            limit=limit
        )
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–∫—Ç—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        facts = []
        for item in edges:
            if hasattr(item, 'fact'):
                facts.append(item.fact)
            elif hasattr(item, 'content'):
                facts.append(item.content)
        return facts
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–∞–∫—Ç–æ–≤: {e}")
        return []

@tool  
async def search_nodes(state: State, query: str, limit: int = 5) -> list[str]:
    """–ü–æ–∏—Å–∫ —É–∑–ª–æ–≤ –≤–æ –≤—Å–µ—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–∞—Ö —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    
    Args:
        state (State): –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞.
        query (str): –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.
        limit (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5.
        
    Returns:
        list: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—é–º–µ —É–∑–ª–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å—É.
    """
    try:
        nodes = await zep.graph.search(
            user_id=state["user_name"], 
            query=query, 
            limit=limit
        )
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—é–º–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        summaries = []
        for item in nodes:
            if hasattr(item, 'summary'):
                summaries.append(item.summary)
            elif hasattr(item, 'fact'):
                summaries.append(item.fact)
            elif hasattr(item, 'content'):
                summaries.append(item.content)
        return summaries
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É–∑–ª–æ–≤: {e}")
        return []

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ LLM
tools = [search_facts, search_nodes]
tool_node = ToolNode(tools)
llm = ChatOpenAI(model="gpt-4o-mini", temperature=0).bind_tools(tools)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —á–∞—Ç-–±–æ—Ç–∞
async def chatbot(state: State):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —á–∞—Ç-–±–æ—Ç–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Zep"""
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ Zep
        memory = await zep.thread.get_user_context(state["thread_id"])
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        system_message = SystemMessage(
            content=f"""–¢—ã - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –æ—Ç–∑—ã–≤—á–∏–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —Å –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç—å—é. 
            –ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤.
            –ë—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–º, —ç–º–ø–∞—Ç–∏—á–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º.
            
            –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
            {memory.context}"""
        )
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è LLM
        messages = [system_message] + state["messages"]
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM
        response = await llm.ainvoke(messages)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –≤ Zep
        if state["messages"]:
            messages_to_save = [
                Message(
                    role="user",
                    name=f"{state['first_name']} {state['last_name']}",
                    content=state["messages"][-1].content,
                ),
                Message(role="assistant", content=response.content),
            ]
            
            await zep.thread.add_messages(
                thread_id=state["thread_id"],
                messages=messages_to_save,
            )
        
        return {"messages": [response]}
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ chatbot: {e}")
        error_response = AIMessage(content="–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return {"messages": [error_response]}

# –§—É–Ω–∫—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
def should_continue(state: State):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"""
    messages = state["messages"]
    last_message = messages[-1]
    
    if hasattr(last_message, 'tool_calls') and last_message.tool_calls:
        return "tools"
    return END

# –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∞ LangGraph
def create_graph():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∞ LangGraph —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Zep"""
    workflow = StateGraph(State)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–∑–ª–æ–≤
    workflow.add_node("chatbot", chatbot)
    workflow.add_node("tools", tool_node)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤
    workflow.set_entry_point("chatbot")
    workflow.add_conditional_edges("chatbot", should_continue)
    workflow.add_edge("tools", "chatbot")
    
    # –ö–æ–º–ø–∏–ª—è—Ü–∏—è —Å checkpointer
    checkpointer = MemorySaver()
    return workflow.compile(checkpointer=checkpointer)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –≥—Ä–∞—Ñ–∞
async def graph_invoke(
    message: str, 
    first_name: str, 
    last_name: str, 
    thread_id: str, 
    ai_response_only: bool = True
):
    """–í—ã–∑–æ–≤ –≥—Ä–∞—Ñ–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    graph = create_graph()
    user_name = f"{first_name}_{last_name}_{thread_id[:8]}"
    
    try:
        result = await graph.ainvoke(
            {
                "messages": [HumanMessage(content=message)],
                "first_name": first_name,
                "last_name": last_name,
                "thread_id": thread_id,
                "user_name": user_name,
            },
            config={"configurable": {"thread_id": thread_id}},
        )
        
        if ai_response_only:
            return result["messages"][-1].content
        else:
            return result["messages"]
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
def extract_messages(result):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    messages = []
    for msg in result["messages"]:
        if hasattr(msg, 'content'):
            role = "assistant" if isinstance(msg, AIMessage) else "user"
            messages.append(f"{role}: {msg.content}")
    return "\n".join(messages)

# –§—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
async def demo_conversation():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–π –ø–∞–º—è—Ç—å—é"""
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Zep + LangGraph Memory")
    print("=" * 50)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
    first_name = "–ê–Ω–Ω–∞"
    last_name = "–ü–µ—Ç—Ä–æ–≤–∞" 
    thread_id = str(uuid.uuid4())
    user_name = f"{first_name}_{last_name}_{thread_id[:8]}"
    
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {first_name} {last_name}")
    print(f"üîó Thread ID: {thread_id}")
    print(f"üÜî User Name: {user_name}")
    
    # –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ—Ç–æ–∫ –≤ Zep
    try:
        print("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Zep...")
        await zep.user.add(
            user_id=user_name,
            first_name=first_name,
            last_name=last_name
        )
        print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω")
        
        print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –≤ Zep...")
        await zep.thread.create(
            thread_id=thread_id,
            user_id=user_name
        )
        print("‚úÖ –ü–æ—Ç–æ–∫ —Å–æ–∑–¥–∞–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/–ø–æ—Ç–æ–∫–∞: {e}")
        return
        
    print("-" * 50)
    
    # –°–µ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    messages = [
        "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–Ω–∞, —è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –∏–∑ –ú–æ—Å–∫–≤—ã.",
        "–ú–Ω–µ 28 –ª–µ—Ç, —Ä–∞–±–æ—Ç–∞—é –≤ IT-–∫–æ–º–ø–∞–Ω–∏–∏ —É–∂–µ 5 –ª–µ—Ç.",
        "–£–≤–ª–µ–∫–∞—é—Å—å –º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º –∏ –∏–∑—É—á–∞—é Python.",
        "–£ –º–µ–Ω—è –µ—Å—Ç—å –∫–æ—Ç –ø–æ –∏–º–µ–Ω–∏ –ú—É—Ä–∑–∏–∫, –æ–Ω –æ—á–µ–Ω—å –∏–≥—Ä–∏–≤—ã–π.",
        "–ü–ª–∞–Ω–∏—Ä—É—é –≤ —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É –∏–∑—É—á–∞—Ç—å LangChain –ø–æ–¥—Ä–æ–±–Ω–µ–µ."
    ]
    
    # –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    for i, message in enumerate(messages, 1):
        print(f"\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ {i}:")
        print(f"üë§ –ê–Ω–Ω–∞: {message}")
        
        response = await graph_invoke(message, first_name, last_name, thread_id)
        print(f"ü§ñ –ü–æ–º–æ—â–Ω–∏–∫: {response}")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        await asyncio.sleep(0.5)
    
    print("\n" + "="*50)
    print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –∞–≥–µ–Ω—Ç–∞")
    print("="*50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–º—è—Ç–∏
    test_questions = [
        "–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç –∏ –≥–¥–µ —è —Ä–∞–±–æ—Ç–∞—é?",
        "–°–∫–æ–ª—å–∫–æ –º–Ω–µ –ª–µ—Ç –∏ –∫–∞–∫–æ–π —É –º–µ–Ω—è –æ–ø—ã—Ç?",
        "–ß—Ç–æ —è –∏–∑—É—á–∞—é –∏ —á–µ–º —É–≤–ª–µ–∫–∞—é—Å—å?", 
        "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –º–æ–µ–≥–æ –∫–æ—Ç–∞.",
        "–ö–∞–∫–∏–µ —É –º–µ–Ω—è –ø–ª–∞–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥?"
    ]
    
    for i, question in enumerate(test_questions, 1):
        print(f"\n‚ùì –¢–µ—Å—Ç {i}: {question}")
        response = await graph_invoke(question, first_name, last_name, thread_id)
        print(f"ü§ñ –û—Ç–≤–µ—Ç: {response}")
        await asyncio.sleep(0.5)
    
    # –ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ Zep
    print("\n" + "="*50)
    print("üß† –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ Zep Memory")
    print("="*50)
    
    try:
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Zep...")
        await asyncio.sleep(3)
        
        memory = await zep.thread.get_user_context(thread_id=thread_id)
        if memory and memory.context:
            print(memory.context)
        else:
            print("–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–∫–∞ –ø—É—Å—Ç. –î–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –≤ Zep.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
    
    print(f"\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
async def interactive_mode():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –∞–≥–µ–Ω—Ç–æ–º"""
    print("üéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º Zep + LangGraph")
    print("–í–≤–µ–¥–∏—Ç–µ 'quit' –¥–ª—è –≤—ã—Ö–æ–¥–∞")
    print("="*50)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    first_name = input("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è: ").strip() or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    last_name = input("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é: ").strip() or "–¢–µ—Å—Ç–æ–≤—ã–π"
    thread_id = str(uuid.uuid4())
    user_name = f"{first_name}_{last_name}_{thread_id[:8]}"
    
    print(f"\nüîó Thread ID: {thread_id}")
    print(f"üÜî User Name: {user_name}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ—Ç–æ–∫–∞ –≤ Zep
    try:
        print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ—Ç–æ–∫–∞...")
        await zep.user.add(
            user_id=user_name,
            first_name=first_name,
            last_name=last_name
        )
        await zep.thread.create(
            thread_id=thread_id,
            user_id=user_name
        )
        print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –ø–æ—Ç–æ–∫ —Å–æ–∑–¥–∞–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {e}")
        return
    
    print("üí¨ –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥...\n")
    
    while True:
        try:
            user_input = input(f"{first_name}: ").strip()
            
            if user_input.lower() in ['quit', 'exit', '–≤—ã—Ö–æ–¥']:
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            
            if not user_input:
                continue
                
            response = await graph_invoke(user_input, first_name, last_name, thread_id)
            print(f"ü§ñ –ü–æ–º–æ—â–Ω–∏–∫: {response}\n")
            
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Zep + LangGraph Demo")
    
    try:
        check_api_keys()
        print("‚úÖ API –∫–ª—é—á–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
        
        # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
        print("1. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è")
        print("2. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º")
        
        choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1 –∏–ª–∏ 2): ").strip()
        
        if choice == "1":
            await demo_conversation()
        elif choice == "2":
            await interactive_mode()
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...")
            await demo_conversation()
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())

"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤
–ü—Ä—è–º–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ LangGraph, CrewAI –∏ AutoGen –Ω–∞ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–µ
"""

import os
import time
import json
from typing import Dict, Any, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–≤—Å–µ –∫–ª—é—á–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã)
os.environ.setdefault("OPENAI_API_KEY", "your-openai-api-key-here")
os.environ.setdefault("TAVILY_API_KEY", "your-tavily-api-key-here") 
os.environ.setdefault("SERPER_API_KEY", "your-serper-api-key-here")

class FrameworkComparison:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–∑–Ω—ã—Ö —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤"""
    
    def __init__(self):
        self.results = {}
        self.test_topic = "–í–ª–∏—è–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –Ω–∞ —Ä—ã–Ω–æ–∫ —Ç—Ä—É–¥–∞ –≤ 2025 –≥–æ–¥—É"
        
    def test_langgraph(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç LangGraph —Å–∏—Å—Ç–µ–º—ã"""
        print("üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LangGraph...")
        start_time = time.time()
        
        try:
            # –ò–º–ø–æ—Ä—Ç –∏ –∑–∞–ø—É—Å–∫ LangGraph —Å–∏—Å—Ç–µ–º—ã
            from langgraph_research_system import run_research_system
            
            result = run_research_system(self.test_topic, verbose=False)
            
            end_time = time.time()
            execution_time = end_time - start_time
            
            return {
                "framework": "LangGraph",
                "success": True,
                "execution_time": round(execution_time, 2),
                "result_length": len(result) if result else 0,
                "result_preview": result[:200] + "..." if result and len(result) > 200 else result,
                "error": None
            }
            
        except Exception as e:
            return {
                "framework": "LangGraph", 
                "success": False,
                "execution_time": time.time() - start_time,
                "result_length": 0,
                "result_preview": "",
                "error": str(e)
            }
    
    def test_crewai(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç CrewAI —Å–∏—Å—Ç–µ–º—ã"""
        print("üë• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CrewAI...")
        start_time = time.time()
        
        try:
            # –ò–º–ø–æ—Ä—Ç –∏ –∑–∞–ø—É—Å–∫ CrewAI —Å–∏—Å—Ç–µ–º—ã
            from crewai_research_system import run_research_project
            
            result = run_research_project(self.test_topic, use_hierarchical=False)
            
            end_time = time.time()
            execution_time = end_time - start_time
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç CrewAI –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
            result_str = str(result) if result else ""
            
            return {
                "framework": "CrewAI",
                "success": True,
                "execution_time": round(execution_time, 2),
                "result_length": len(result_str),
                "result_preview": result_str[:200] + "..." if len(result_str) > 200 else result_str,
                "error": None
            }
            
        except Exception as e:
            return {
                "framework": "CrewAI",
                "success": False, 
                "execution_time": time.time() - start_time,
                "result_length": 0,
                "result_preview": "",
                "error": str(e)
            }
    
    def test_autogen(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç AutoGen —Å–∏—Å—Ç–µ–º—ã"""
        print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AutoGen...")
        start_time = time.time()
        
        try:
            # –ò–º–ø–æ—Ä—Ç –∏ –∑–∞–ø—É—Å–∫ AutoGen —Å–∏—Å—Ç–µ–º—ã
            from autogen_research_demo import AutoGenResearchSystem
            
            system = AutoGenResearchSystem()
            result = system.run_research_project(self.test_topic, save_to_file=False)
            
            end_time = time.time()
            execution_time = end_time - start_time
            
            return {
                "framework": "AutoGen",
                "success": True,
                "execution_time": round(execution_time, 2),
                "result_length": len(result) if result else 0,
                "result_preview": result[:200] + "..." if result and len(result) > 200 else result,
                "error": None
            }
            
        except Exception as e:
            return {
                "framework": "AutoGen",
                "success": False,
                "execution_time": time.time() - start_time,
                "result_length": 0,
                "result_preview": "",
                "error": str(e)
            }
    
    def run_comparison(self, save_results: bool = True) -> Dict[str, Dict[str, Any]]:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤"""
        
        print("üöÄ –ó–ê–ü–£–°–ö –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –§–†–ï–ô–ú–í–û–†–ö–û–í")
        print("="*80)
        print(f"üìã –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞: {self.test_topic}")
        print("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º: LangGraph, CrewAI, AutoGen")
        print("="*80)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
        missing_keys = []
        required_keys = ["OPENAI_API_KEY", "TAVILY_API_KEY", "SERPER_API_KEY"]
        
        for key in required_keys:
            if not os.environ.get(key) or os.environ.get(key).startswith("your-"):
                missing_keys.append(key)
        
        if missing_keys:
            print(f"‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç API –∫–ª—é—á–∏: {', '.join(missing_keys)}")
            print("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print()
        
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        results = {}
        
        # –¢–µ—Å—Ç 1: LangGraph
        results['langgraph'] = self.test_langgraph()
        print(f"‚úÖ LangGraph –∑–∞–≤–µ—Ä—à—ë–Ω –∑–∞ {results['langgraph']['execution_time']}—Å")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        time.sleep(2)
        
        # –¢–µ—Å—Ç 2: CrewAI  
        results['crewai'] = self.test_crewai()
        print(f"‚úÖ CrewAI –∑–∞–≤–µ—Ä—à—ë–Ω –∑–∞ {results['crewai']['execution_time']}—Å")
        
        # –ü–∞—É–∑–∞
        time.sleep(2)
        
        # –¢–µ—Å—Ç 3: AutoGen
        results['autogen'] = self.test_autogen()
        print(f"‚úÖ AutoGen –∑–∞–≤–µ—Ä—à—ë–Ω –∑–∞ {results['autogen']['execution_time']}—Å")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if save_results:
            self.save_comparison_results(results)
        
        # –í—ã–≤–æ–¥ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        self.print_comparison_table(results)
        
        return results
    
    def print_comparison_table(self, results: Dict[str, Dict[str, Any]]):
        """–í—ã–≤–æ–¥ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        
        print("\n" + "="*80)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–†–ê–í–ù–ï–ù–ò–Ø –§–†–ï–ô–ú–í–û–†–ö–û–í")
        print("="*80)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        print(f"{'–§—Ä–µ–π–º–≤–æ—Ä–∫':<15} {'–°—Ç–∞—Ç—É—Å':<10} {'–í—Ä–µ–º—è (—Å)':<10} {'–†–∞–∑–º–µ—Ä':<12} {'–û—à–∏–±–∫–∏':<20}")
        print("-" * 80)
        
        for framework_key, result in results.items():
            framework = result['framework']
            status = "‚úÖ –£—Å–ø–µ—Ö" if result['success'] else "‚ùå –û—à–∏–±–∫–∞"
            exec_time = f"{result['execution_time']:.2f}"
            result_size = f"{result['result_length']} —Å–∏–º–≤."
            error = result['error'][:15] + "..." if result['error'] and len(result['error']) > 15 else result['error'] or "-"
            
            print(f"{framework:<15} {status:<10} {exec_time:<10} {result_size:<12} {error:<20}")
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\n" + "="*40)
        print("üìà –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
        print("="*40)
        
        successful_results = {k: v for k, v in results.items() if v['success']}
        
        if successful_results:
            # –°–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π
            fastest = min(successful_results.items(), key=lambda x: x[1]['execution_time'])
            print(f"üèÜ –°–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π: {fastest[1]['framework']} ({fastest[1]['execution_time']:.2f}—Å)")
            
            # –°–∞–º—ã–π –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            most_detailed = max(successful_results.items(), key=lambda x: x[1]['result_length'])
            print(f"üìù –°–∞–º—ã–π –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {most_detailed[1]['framework']} ({most_detailed[1]['result_length']} —Å–∏–º–≤–æ–ª–æ–≤)")
            
            # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            avg_time = sum(r['execution_time'] for r in successful_results.values()) / len(successful_results)
            print(f"‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.2f}—Å")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("\n" + "="*40)
        print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
        print("="*40)
        
        print("üîó LangGraph: –õ—É—á—à–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∏ –æ—Ç–ª–∞–¥–∫–∞, —Å–ª–æ–∂–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
        print("üë• CrewAI: –ü—Ä–æ—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –±—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç")
        print("ü§ñ AutoGen: –î–∏–∞–ª–æ–≥–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è")
    
    def save_comparison_results(self, results: Dict[str, Dict[str, Any]]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            output_data = {
                "test_metadata": {
                    "topic": self.test_topic,
                    "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
                    "frameworks_tested": len(results)
                },
                "results": results
            }
            
            filename = "framework_comparison_results.json"
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(output_data, f, ensure_ascii=False, indent=2)
            
            print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
    
    def detailed_feature_comparison(self):
        """–ü–æ–¥—Ä–æ–±–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤"""
        
        print("\nüîç –î–ï–¢–ê–õ–¨–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô")
        print("="*80)
        
        features = {
            "LangGraph": {
                "–°–ª–æ–∂–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏": "–í—ã—Å–æ–∫–∞—è",
                "–ö–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –ø—Ä–æ—Ü–µ—Å—Å–æ–º": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π", 
                "–û—Ç–ª–∞–¥–∫–∞": "–û—Ç–ª–∏—á–Ω–∞—è (LangSmith)",
                "–£—Å–ª–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞": "–í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è",
                "–ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å": "–î–∞ (Checkpoints)",
                "Streaming": "–î–∞",
                "–ö—Ä–∏–≤–∞—è –æ–±—É—á–µ–Ω–∏—è": "–ö—Ä—É—Ç–∞—è",
                "–≠–∫–æ—Å–∏—Å—Ç–µ–º–∞": "LangChain"
            },
            "CrewAI": {
                "–°–ª–æ–∂–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏": "–ù–∏–∑–∫–∞—è",
                "–ö–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –ø—Ä–æ—Ü–µ—Å—Å–æ–º": "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π",
                "–û—Ç–ª–∞–¥–∫–∞": "–ë–∞–∑–æ–≤–∞—è (verbose)",
                "–£—Å–ª–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞": "–°–ª–æ–∂–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è", 
                "–ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å": "–î–∞ (–ø–∞–º—è—Ç—å –∞–≥–µ–Ω—Ç–æ–≤)",
                "Streaming": "–ù–µ—Ç",
                "–ö—Ä–∏–≤–∞—è –æ–±—É—á–µ–Ω–∏—è": "–ü–æ–ª–æ–≥–∞—è",
                "–≠–∫–æ—Å–∏—Å—Ç–µ–º–∞": "–ù–µ–∑–∞–≤–∏—Å–∏–º–∞—è"
            },
            "AutoGen": {
                "–°–ª–æ–∂–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏": "–°—Ä–µ–¥–Ω—è—è",
                "–ö–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –ø—Ä–æ—Ü–µ—Å—Å–æ–º": "–ì–∏–±–∫–∏–π",
                "–û—Ç–ª–∞–¥–∫–∞": "–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤",
                "–£—Å–ª–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞": "–ß–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥",
                "–ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å": "–ß–∞—Å—Ç–∏—á–Ω–æ",
                "Streaming": "–î–∞",
                "–ö—Ä–∏–≤–∞—è –æ–±—É—á–µ–Ω–∏—è": "–°—Ä–µ–¥–Ω—è—è", 
                "–≠–∫–æ—Å–∏—Å—Ç–µ–º–∞": "Microsoft"
            }
        }
        
        # –í—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        feature_names = list(next(iter(features.values())).keys())
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        print(f"{'–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞':<25} {'LangGraph':<20} {'CrewAI':<20} {'AutoGen':<20}")
        print("-" * 85)
        
        # –°—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
        for feature in feature_names:
            langgraph_val = features["LangGraph"][feature]
            crewai_val = features["CrewAI"][feature]
            autogen_val = features["AutoGen"][feature]
            
            print(f"{feature:<25} {langgraph_val:<20} {crewai_val:<20} {autogen_val:<20}")

def quick_comparison():
    """–ë—ã—Å—Ç—Ä–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
    print("‚ö° –ë–´–°–¢–†–û–ï –°–†–ê–í–ù–ï–ù–ò–ï –§–†–ï–ô–ú–í–û–†–ö–û–í")
    print("="*60)
    
    comparison = FrameworkComparison()
    comparison.detailed_feature_comparison()
    
    print("\nüí≠ –í—ã–≤–æ–¥—ã:")
    print("‚Ä¢ LangGraph ‚Äî –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö production —Å–∏—Å—Ç–µ–º —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º")
    print("‚Ä¢ CrewAI ‚Äî –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–æ—Å—Ç—ã—Ö workflow")
    print("‚Ä¢ AutoGen ‚Äî –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –∏ –¥–∏–∞–ª–æ–≥–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º")

def full_performance_test():
    """–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    comparison = FrameworkComparison()
    results = comparison.run_comparison()
    return results

def interactive_comparison():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("üéõÔ∏è  –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï –§–†–ï–ô–ú–í–û–†–ö–û–í")
    print("="*60)
    
    comparison = FrameworkComparison()
    
    # –ü–æ–∑–≤–æ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—É
    custom_topic = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–∏–ª–∏ Enter –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é): ").strip()
    if custom_topic:
        comparison.test_topic = custom_topic
        print(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ç–µ–º–∞: {custom_topic}")
    
    # –í—ã–±–æ—Ä —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print("\n–ö–∞–∫–∏–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å?")
    print("1. –í—Å–µ (LangGraph + CrewAI + AutoGen)")
    print("2. –¢–æ–ª—å–∫–æ LangGraph –∏ CrewAI")
    print("3. –í—ã–±–æ—Ä–æ—á–Ω–æ")
    
    choice = input("–í—ã–±–æ—Ä (1-3): ").strip()
    
    if choice == "1":
        results = comparison.run_comparison()
    elif choice == "2":
        results = {}
        results['langgraph'] = comparison.test_langgraph()
        results['crewai'] = comparison.test_crewai()
        comparison.print_comparison_table(results)
    elif choice == "3":
        results = {}
        if input("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å LangGraph? (y/n): ").lower() == 'y':
            results['langgraph'] = comparison.test_langgraph()
        if input("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å CrewAI? (y/n): ").lower() == 'y':
            results['crewai'] = comparison.test_crewai()
        if input("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å AutoGen? (y/n): ").lower() == 'y':
            results['autogen'] = comparison.test_autogen()
        
        if results:
            comparison.print_comparison_table(results)
        else:
            print("–§—Ä–µ–π–º–≤–æ—Ä–∫–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    else:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        return
    
    return results

# –ì–ª–∞–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
if __name__ == "__main__":
    print("üéØ Framework Comparison Tool")
    print("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è LangGraph, CrewAI –∏ AutoGen")
    print("="*80)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    missing_deps = []
    try:
        import autogen
    except ImportError:
        missing_deps.append("autogen-agentchat")
    
    try:
        import crewai
    except ImportError:
        missing_deps.append("crewai")
    
    try:
        import langgraph
    except ImportError:
        missing_deps.append("langgraph")
    
    if missing_deps:
        print(f"‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {', '.join(missing_deps)}")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install " + " ".join(missing_deps))
        print()
    
    # –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:")
    print("1. –ë—ã—Å—Ç—Ä–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π)")
    print("2. –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    print("3. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ")
    
    try:
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3): ").strip()
        
        if choice == "1":
            quick_comparison()
        elif choice == "2":
            full_performance_test()
        elif choice == "3":
            interactive_comparison()
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –∑–∞–ø—É—Å–∫–∞—é –±—ã—Å—Ç—Ä–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ...")
            quick_comparison()
            
    except KeyboardInterrupt:
        print("\nüëã –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
def analyze_execution_logs():
    """–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤"""
    print("üìã –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è...")
    
    log_files = [
        "crew_execution_log.txt",
        "hierarchical_crew_log.txt", 
        "research_report_langgraph.md",
        "research_report_crewai.md",
        "research_report_autogen.md"
    ]
    
    existing_logs = []
    for log_file in log_files:
        if os.path.exists(log_file):
            size = os.path.getsize(log_file)
            existing_logs.append(f"‚Ä¢ {log_file} ({size} –±–∞–π—Ç)")
    
    if existing_logs:
        print("–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
        for log in existing_logs:
            print(log)
    else:
        print("–§–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã —Å–Ω–∞—á–∞–ª–∞.")

def cleanup_test_files():
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    test_files = [
        "research_report_langgraph.md",
        "research_report_crewai.md", 
        "research_report_autogen.md",
        "crew_execution_log.txt",
        "hierarchical_crew_log.txt",
        "framework_comparison_results.json",
        "research_graph.png"
    ]
    
    cleaned = 0
    for file in test_files:
        if os.path.exists(file):
            os.remove(file)
            cleaned += 1
    
    print(f"üßπ –û—á–∏—â–µ–Ω–æ {cleaned} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤")